#!/bin/zsh

{
  if [[ ${ZSH_VERSION} != 5.1.1 ]]; then
    if is-at-least 5.2; then
      autoload -Uz bracketed-paste-url-magic
      zle -N bracketed-paste bracketed-paste-url-magic
    else
      if is-at-least 5.1; then
        autoload -Uz bracketed-paste-magic
        zle -N bracketed-paste bracketed-paste-magic
      fi
      autoload -Uz url-quote-magic
      zle -N self-insert url-quote-magic
    fi
  fi

  # Z line editor, zsh’s version of readline has a very good Emacs keybinding
  # support which we’ll enable and configure it to regard / as a word separator
  # too (highly useful for editing paths):
  WORDCHARS=${WORDCHARS//[&=\/;!#%\{\}]}
  bindkey -e

  # Use human-friendly identifiers
  local -A Key
  Key=(
  'Control'      '\C-'
  'ControlLeft'  '\e[1;5D \e[5D \e\e[D \eOd \eOD'
  'ControlRight' '\e[1;5C \e[5C \e\e[C \eOc \eOC'
  'Escape'       '\e'
  'Meta'         '\M-'
  'Backspace'    "^?"
  'Delete'       "^[[3~"
  'F1'           "${terminfo[kf1]}"
  'F2'           "${terminfo[kf2]}"
  'F3'           "${terminfo[kf3]}"
  'F4'           "${terminfo[kf4]}"
  'F5'           "${terminfo[kf5]}"
  'F6'           "${terminfo[kf6]}"
  'F7'           "${terminfo[kf7]}"
  'F8'           "${terminfo[kf8]}"
  'F9'           "${terminfo[kf9]}"
  'F10'          "${terminfo[kf10]}"
  'F11'          "${terminfo[kf11]}"
  'F12'          "${terminfo[kf12]}"
  'Insert'       "${terminfo[kich1]}"
  'Home'         "${terminfo[khome]}"
  'PageUp'       "${terminfo[kpp]}"
  'End'          "${terminfo[kend]}"
  'PageDown'     "${terminfo[knp]}"
  'Up'           "${terminfo[kcuu1]}"
  'Left'         "${terminfo[kcub1]}"
  'Down'         "${terminfo[kcud1]}"
  'Right'        "${terminfo[kcuf1]}"
  'BackTab'      "${terminfo[kcbt]}"
  )

  function --hz-boundkey()
  {
    case "$(bindkey "${1}")" in
      *undefined-key)
        return 1
        ;;
      *)
        return 0
        ;;
    esac
  }

  function --hz-bindkey()
  {
    local -a only_unbound
    local key

    builtin zparseopts -D -E -K \
      only-unbound=only_unbound -only-unbound=only_unbound

    (( ${#Key[${1}]} )) || return

    if (( ${#} == 3 )); then
      key="${Key[${1}]}${2}"

      (( ${#only_unbound} )) && --hz-boundkey "${key}" && return

      bindkey "${key}" "${3}"
    else
      local name bindfunc
      name="${1}"
      bindfunc="${2}"

      for key in "${(s: :)Key[${name}]}"; do
        (( ${#only_unbound} )) && --hz-boundkey "${key}" && next
        bindkey "${key}" "${bindfunc}"
      done
    fi
  }

  # --hz-bindkey Home beginning-of-line
  # --hz-bindkey End end-of-line
  # --hz-bindkey ControlLeft backward-word
  # --hz-bindkey ControlRight forward-word

  # --hz-bindkey Insert overwrite-mode

  --hz-bindkey Delete delete-char
  --hz-bindkey Backspace backward-delete-char
  --hz-bindkey Left backward-char
  --hz-bindkey Right forward-char

  --hz-bindkey Control A beginning-of-line
  --hz-bindkey Control E end-of-line
  --hz-bindkey Control K kill-line
  --hz-bindkey Control L clear-screen
  --hz-bindkey --only-unbound Control R history-incremental-search-backward
  --hz-bindkey Control U kill-whole-line
  --hz-bindkey Control V quoted-insert
  --hz-bindkey Control W backward-kill-word
  --hz-bindkey Control N down-history
  --hz-bindkey Control P up-history

  --hz-bindkey BackTab reverse-menu-complete

  --hz-bindkey Escape "[A" history-beginning-search-backward
  --hz-bindkey Escape "[B" history-beginning-search-forward

  --hz-bindkey Escape H run-help
  --hz-bindkey Escape h run-help

  --hz-bindkey Escape m copy-prev-shell-word

  bindkey ' ' magic-space

  --hz-bindkey Control Og noglob-command-line
  --hz-bindkey Control Os sudo-command-line
  --hz-bindkey Control Ox sub-command-line

  autoload -Uz -- --rationalise-dot
  zle -N -- --rationalise-dot
  bindkey . --rationalise-dot

  bindkey -s $'\u00a0' '^u'

  unfunction -- --hz-bindkey --hz-boundkey
}
