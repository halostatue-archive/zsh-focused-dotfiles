# .zshrc interactive configuration file for zsh
# thanks to klapmuetz, caphuso, Mikachu, zshwiki.org.
# first revision: 24mar2007  +chris+

# == OPTIONS

setopt NO_BEEP
setopt C_BASES
setopt OCTAL_ZEROES
setopt PRINT_EIGHT_BIT
setopt SH_NULLCMD
setopt AUTO_CONTINUE
setopt NO_BG_NICE
setopt PATH_DIRS
setopt NO_NOMATCH
setopt EXTENDED_GLOB
disable -p '^'

setopt LIST_PACKED
setopt BASH_AUTO_LIST
setopt NO_AUTO_MENU
setopt NO_CORRECT
setopt NO_ALWAYS_LAST_PROMPT
setopt NO_FLOW_CONTROL

setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS
setopt PUSHD_MINUS

setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_SPACE
setopt INC_APPEND_HISTORY
setopt EXTENDED_HISTORY

SAVEHIST=9000
HISTSIZE=9000
HISTFILE=~/.zsh_history

LISTMAX=0
REPORTTIME=60
TIMEFMT="%J  %U user %S system %P cpu %MM memory %*E total"
MAILCHECK=0

# == MISC

umask 002

# This needs to run before compinit installs keybindings.
# 12mar2013  +chris+
bindkey -e

# == PROMPT

# gitpwd - print %~, limited to $NDIR segments, with inline git branch
NDIRS=2
gitpwd() {
  local -a segs splitprefix; local prefix branch
  segs=("${(Oas:/:)${(D)PWD}}")
  segs=("${(@)segs/(#b)(?(#c10))??*(?(#c5))/${(j:\u2026:)match}}")

  if gitprefix=$(git rev-parse --show-prefix 2>/dev/null); then
    splitprefix=("${(s:/:)gitprefix}")
    if ! branch=$(git symbolic-ref -q --short HEAD); then
      branch=$(git name-rev --name-only HEAD 2>/dev/null)
      [[ $branch = *\~* ]] || branch+="~0"    # distinguish detached HEAD
    fi
    if (( $#splitprefix > NDIRS )); then
      print -n "${segs[$#splitprefix]}@$branch "
    else
      segs[$#splitprefix]+=@$branch
    fi
  fi

  (( $#segs == NDIRS+1 )) && [[ $segs[-1] == "" ]] && print -n /
  print "${(j:/:)${(@Oa)segs[1,NDIRS]}}"
}

cnprompt6() {
  case "$TERM" in
    xterm*|rxvt*)
      precmd() { [[ -t 1 ]] && print -Pn "\e]0;%m: %~\a" }
      preexec() { [[ -t 1 ]] && print -n "\e]0;$HOST: ${(q)1//(#m)[$'\000-\037\177-']/${(q)MATCH}}\a" }
  esac
  setopt PROMPT_SUBST
  nbsp=$'\u00A0'
  PS1='%B%m%(?.. %??)%(1j. %j&.)%b $(gitpwd)%B%(!.%F{red}.%F{yellow})%#${SSH_CONNECTION:+%#}$nbsp%b'
  RPROMPT=''
}

cnprompt6

# == COMPLETION

zmodload zsh/complist
autoload -Uz compinit && compinit

zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*' special-dirs ..
zstyle ':completion:*' use-ip true
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' rehash true

# Colors, like ls(1).
# 25mar2007  +chris+
# 25feb2011  +chris+
export LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32'
zstyle ':completion:*' list-colors ''
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

zstyle ':completion:*:functions'           ignored-patterns '_*'
zstyle ':completion:*:*:*:*:processes*'    force-list always
zstyle ':completion:*:*:kill:*:processes'  insert-ids single
zstyle ':completion:*:*:kill:*:processes'  sort false
zstyle ':completion:*:*:kill:*:processes'  command 'ps -u "$USER"'
zstyle ':completion:*:processes-names'     command "ps -eo cmd= | sed 's:\([^ ]*\).*:\1:;s:\(/[^ ]*/\)::;/^\[/d'"
zstyle ':completion:*:evince::' \
  file-patterns '*.(#i)(dvi|djvu|tiff|pdf|ps|xps)(|.bz2|.gz|.xz|.z) *(-/)' '*'
compdef pkill=killall
compdef ping6=ping
compdef _gnu_generic curl emacs emacsclient file head mv paste
compdef _gnu_generic tail touch scrot shred watch wc zsh

# Don't complete the same twice for kill/diff.
# 25nov2010  +chris+
zstyle ':completion:*:(kill|diff):*'       ignore-line yes

# Don't complete backup files as commands.
# 29sep2012  +chris+
zstyle ':completion:*:complete:-command-::*' ignored-patterns '*\~'

# Cycle through history completion (M-/, M-,).
# 12mar2013  +chris+
zstyle ':completion:history-words:*:history-words' stop yes
zstyle ':completion:history-words:*:history-words' list no
zstyle ':completion:history-words:*' remove-all-dups yes

# == ZLE

# Emacs keybindings have been set above.

# Disable bracketed paste.
# 31aug2015  +chris+
unset zle_bracketed_paste

# This is even better than copy-prev-shell-word, can be called repeatedly.
# 12mar2013  +chris+
autoload -Uz copy-earlier-word
zle -N copy-earlier-word
bindkey "^[m" copy-earlier-word

# Remove prompt on line paste (cf. last printed char in cnprompt6).
# 09mar2013  +chris+
bindkey -s $nbsp '^u'

# Shortcut for ' inside ' quoting
# 14mar2016  +chris+
bindkey -s "\C-x'" \''\\'\'\'

# Standard keybindings
# 07apr2011  +chris+
# 04jan2013  +chris+  page-up/down for menu-select
# 14jan2016  +chris+  explicit binds for menu-select
[[ -n $terminfo[khome] ]] && bindkey $terminfo[khome] beginning-of-line
[[ -n $terminfo[kend]  ]] && bindkey $terminfo[kend]  end-of-line
[[ -n $terminfo[kdch1] ]] && bindkey $terminfo[kdch1] delete-char
[[ -n $terminfo[kpp]   ]] && bindkey $terminfo[kpp] backward-word
[[ -n $terminfo[knp]   ]] && bindkey $terminfo[knp] forward-word
[[ -n $terminfo[kpp]   ]] && bindkey -M menuselect $terminfo[kpp] backward-word
[[ -n $terminfo[knp]   ]] && bindkey -M menuselect $terminfo[knp] forward-word

# Move by physical lines, like gj/gk in vim
# 09apr2013  +chris+
_physical_up_line()   { zle backward-char -n $COLUMNS }
_physical_down_line() { zle forward-char  -n $COLUMNS }
zle -N physical-up-line _physical_up_line
zle -N physical-down-line _physical_down_line
bindkey "\e\e[A" physical-up-line
bindkey "\e\e[B" physical-down-line

# M-DEL should stop at /.
# 25mar2007  +chris+
# 28feb2011  +chris+
WORDCHARS="*?_-.[]~&;$%^+"

# backward-kill-default-word (with $WORDCHARS from zsh -f and :)
# 26jun2012  +chris+
_backward_kill_default_word() {
  WORDCHARS='*?_-.[]~=/&:;!#$%^(){}<>' zle backward-kill-word
}
zle -N backward-kill-default-word _backward_kill_default_word
bindkey '\e=' backward-kill-default-word   # = is next to backspace

# transpose-words acts on shell words
# 03mar2014  +chris+
autoload -Uz transpose-words-match
zstyle ':zle:transpose-words' word-style shell
zle -N transpose-words transpose-words-match

# History search with globs.
# 21sep2011  +chris+
# 05jun2012  +chris+  and keeping the rest of the line
# 22apr2016  +chris+  space for *
autoload -Uz narrow-to-region
_history-incremental-preserving-pattern-search-backward() {
  local state
  MARK=CURSOR  # magick, else multiple ^R don't work
  narrow-to-region -p "$LBUFFER${BUFFER:+>>}" -P "${BUFFER:+<<}$RBUFFER" -S state
  zle end-of-history
  zle history-incremental-pattern-search-backward
  narrow-to-region -R state
}
zle -N _history-incremental-preserving-pattern-search-backward
bindkey "^R" _history-incremental-preserving-pattern-search-backward
bindkey -M isearch "^R" history-incremental-pattern-search-backward
bindkey -M isearch -s ' ' '*'
bindkey "^S" history-incremental-pattern-search-forward

# Quote stuff that looks like URLs automatically.
# 19jul2008  +chris+
# 02dec2014  +chris+
autoload -U url-quote-magic
zstyle ':urlglobber' url-other-schema ftp git gopher http https magnet
zstyle ':url-quote-magic:*' url-metas '*?[]^(|)~#='  # dropped { }
zle -N self-insert url-quote-magic

# Edit command line with $VISUAL.
# 26jul2010  +chris+
autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

# Force file name completion on C-x TAB, Shift-TAB.
# 23dec2010  +chris+
# 28may2016  +chris+  also complete words already on the command line
autoload -Uz match-words-by-style
_args() {
  local -a ign
  match-words-by-style
  [[ -z "$matched_words[3]" ]] && ign=("$matched_words[2]$matched_words[5]")
  compadd -F ign -- ${(Q)${(z)BUFFER}}
}
zle -C complete-files complete-word _generic
zstyle ':completion:complete-files:*' completer _files _args
zstyle ':completion:complete-files:*' force-list always
bindkey "^X^I" complete-files
bindkey "^[[Z" complete-files

# Force menu on C-f.
# 29dec2010  +chris+
# 21sep2011  +chris+
# 04jan2013  +chris+  rewritten using menu-select
zle -C complete-menu menu-select _generic
_complete_menu() {
  setopt localoptions alwayslastprompt
  zle complete-menu
}
zle -N _complete_menu
bindkey '^F' _complete_menu
bindkey -M menuselect '^F' accept-and-infer-next-history
bindkey -M menuselect '/'  accept-and-infer-next-history
bindkey -M menuselect '^?' undo
bindkey -M menuselect ' ' accept-and-hold
bindkey -M menuselect '*' history-incremental-search-forward

# Move to where the arguments belong.
# 24dec2010  +chris+
after-first-word() {
  zle beginning-of-line
  zle forward-word
}
zle -N after-first-word
bindkey "^X1" after-first-word

# Scroll up in tmux on PageUp.
# 14jan2016  +chris+
_tmux_copy_mode() { tmux copy-mode -eu }
zle -N _tmux_copy_mode
[[ $TMUX_PANE && -n $terminfo[kpp] ]] && bindkey $terminfo[kpp] _tmux_copy_mode

# fg editor on ^Z
# 27sep2011  +chris+
# 17feb2012  +chris+
foreground-vi() { fg %vi }
zle -N foreground-vi
bindkey '^Z' foreground-vi

# Allow to recover from C-c or failed history expansion (thx Mikachu).
# 26may2012  +chris+
_recover_line_or_else() {
  if [[ -z $BUFFER && $CONTEXT = start && $zsh_eval_context = shfunc
        && -n $ZLE_LINE_ABORTED
        && $ZLE_LINE_ABORTED != $history[$((HISTCMD-1))] ]]; then
    LBUFFER+=$ZLE_LINE_ABORTED
    unset ZLE_LINE_ABORTED
  else
    zle .$WIDGET
  fi
}
zle -N up-line-or-history _recover_line_or_else
_zle_line_finish() { ZLE_LINE_ABORTED=$BUFFER }
zle -N zle-line-finish _zle_line_finish

# Increase/decrease last numeric word.
# 04jan2013  +chris+  using incarg
# 12mar2013  +chris+  revert to own implementation, improved
_increase_number() {
  local -a match mbegin mend
  [[ $LBUFFER =~ '([0-9]+)[^0-9]*$' ]] &&
    LBUFFER[mbegin,mend]=$(printf %0${#match[1]}d $((10#$match+${NUMERIC:-1})))
}
zle -N increase-number _increase_number
bindkey '^Xa' increase-number
bindkey -s '^Xx' '^[-^Xa'

# Inject mkdir call to create the dirname of the current argument.
# 10mar2015  +chris+
autoload -Uz modify-current-argument
_mkdir_arg() {
  local arg=
  modify-current-argument '${arg:=$ARG}'
  zle push-line
  LBUFFER="    mkdir -p $arg:h"
  RBUFFER=
}
zle -N mkdir-arg _mkdir_arg
bindkey '^[M' mkdir-arg

# Keep an archive of all commands typed.
# Initialize using:
#   cat /data/dump/juno/2015<->/home/chris/.zsh_history | sort -u | grep '^:' |
#     gawk -F: '{print $0 >> "chris@juno-" strftime("%Y-%m-%d", $2)}'
# 04sep2015  +chris+
mkdir -p ~/.zarchive
zshaddhistory() {
  local words=( ${(z)1} )
  local w1=$words[1]
  (( $+aliases[$w1] )) && w1=$aliases[$w1]
  if [[ -n $1 && $1 != $'\n' && $w1 != " "* ]]; then
    printf ': %s:0;%s' ${(%):-%D{%s}} "$1" >> \
      ~/.zarchive/${(%):-%n@%m-%D{%Y-%m-%d}}
  fi
}

# za WORDS... - search .zarchive for WORDS
za() {
  grep -a -r -e "${(j:.*:)@}" ~/.zarchive |
    sed 's/[ \t]*$//' |
    sort -r | sort -t';' -k2 -u | sort |
    sed $'s,^[^:]*/,,; s,::[^;]*;,\u00A0\u00A0,'
}
alias za=' za'

# == ALIASES

alias ls="LC_COLLATE=C /bin/ls -F --dereference-command-line-symlink-to-dir --color=auto"
alias sort="LC_ALL=C /usr/bin/sort"
alias vi='vim'
alias mc="/usr/bin/mc -c"
alias texclean='rm -f *.toc *.aux *.log *.cp *.fn *.tp *.vr *.pg *.ky *.synctex.gz'
alias dotf='ls .[a-zA-Z0-9_]*'
alias vil='vim *(.om[1]^D)'
alias mtr='/usr/sbin/mtr -t'
alias packer='COLOR=NO packer'
alias cad='cat >/dev/null'
alias fscp='scp -o Ciphers=arcfour128,chacha20-poly1305@openssh.com -o MACs=umac-64@openssh.com'
alias fssh='ssh -o Ciphers=arcfour128,chacha20-poly1305@openssh.com -o MACs=umac-64@openssh.com'
alias cssh='ssh -F /dev/null -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
alias cscp='scp -F /dev/null -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'
alias mplayer='ALSA_OUTPUT=mplayer mpv'
alias j='jobs -l | grep . || echo no jobs running'
alias d.='df -h . |sed 1d'
alias s.='du -sh .'
alias pst='ps -o tname,user,bsdtime,pid,cmd -H'
alias exzsh='zsh -is eval \ zsh --version\; echo \$ZSH_PATCHLEVEL\; PS1="%#\ "'
alias trc='TERM=vt100 transmission-remote-cli'
for cmd (coqtop ocaml MathKernel maxima k k-2.8 k-3.2 k-2014-04-16 k-2016-06-04 q)
  (( $+commands[$cmd] )) && alias $cmd="rlwrap $cmd"

autoload zmv
alias zzmv='noglob zmv -W'

# 29feb2008  +chris+
# 13apr2010  +chris+  allow completion
# 18dec2012  +chris+  set work tree too
alias homegit="GIT_DIR=~/prj/dotfiles/.git GIT_WORK_TREE=~ git"

hash -d mess=~/mess/current
hash -d uni=~/uni/current
hash -d phd=~/phd/current
hash -d wwwtmp=chneukirchen.org:/home/domains/chneukirchen.org/sites/chneukirchen.org/tmp

# e.g: echo *($SHUF)  (NB: slightly biased shuffle)
SHUF='oe|REPLY=${(l:5::0:)RANDOM}${(l:5::0:)RANDOM}${(l:5::0:)RANDOM}|'

# == FUNCTIONS

# mess -- switch to current mess folder, creating it if needed
# 17may2008  +chris+
mess phd () {
  set +e
  DIR=~/$0/$(date +%G/%V)
  [[ -d $DIR ]] || {
    mkdir -p $DIR
    ln -sfn $DIR ~/$0/current
    echo "Created $DIR."
  }
  cd ~/$0/current
}

# preserve cd -
# 21feb2011  +chris+
# 12feb2012  +chris+  save full dirstack, adopted from grml
# 02feb2013  +chris+  only add $PWD to file, better for multiple shells
DIRSTACKSIZE=9
DIRSTACKFILE=~/.zdirs
touch $DIRSTACKFILE
if [[ $#dirstack -eq 0 ]]; then
  dirstack=( ${(f)"$(< $DIRSTACKFILE)"} )
  [[ -d $dirstack[1] ]] && cd $dirstack[1] && cd $OLDPWD
fi
chpwd_dirstack() {
  local -a dirs; dirs=( "$PWD" ${(f)"$(< $DIRSTACKFILE)"} )
  print -l ${${(u)dirs}[0,$DIRSTACKSIZE]} >$DIRSTACKFILE
}

# translate -- grep de-en dictionary
# 22feb2010  +chris+
translate() { grep -i -w -e $1 ~/.translate.de-en } 

# mkcd -- mkdir and cd at once
# 16may2010  +chris+
# 12feb2012  +chris+
# 24jun2014  +chris+  mkcd it is
mkcd() { mkdir -p -- "$1" && cd -- "$1" }
compdef mkcd=mkdir

# img -- display given or all images with the currently preferred viewer
# 01jun2010  +chris+
# 01apr2013  +chris+  back to feh
# 15sep2013  +chris+  back to qiv
img() { qiv -ftuNRi ${*:-.} }

# h -- grep history
# 08mar2011  +chris+
# 14mar2011  +chris+
# 08dec2011  +chris+
# 19mar2014  +chris+  work without argument
h() { fc -l 0 -1 | sed -n "/${1:-.}/s/^ */!/p" | tail -n ${2:-10} }
alias h=' h'

# sucdo -- su -c like sudo without quotes
# 21mar2011  +chris+
# 29mar2016  +chris+  proper quoting
sucdo() { su -c "${(j: :)${(q)@}}" }
compdef sucdo=sudo

# pstop -- ps with top-like output
# 16aug2011  +chris+
pstop() {
  ps -eo pid,user,pri,ni,vsz,rsz,stat,pcpu,pmem,time,comm --sort -pcpu |
    head "${@:--n 20}"
}

# zman -- easier browsing of zsh manpage
# 20sep2011  +chris+
# 16mar2015  +chris+  mdocml splits on any space in $PAGER
zman() { PAGER="less -g -s +/^\s{7}$1" man zshall }

# g -- call grep recursively with useful defaults
# 02oct2011  +chris+
# 10jan2012  +chris+  take an directory as possible last argument
# 28nov2012  +chris+  use grep -r
# 15dec2013  +chris+  use LC_ALL=C for speed and UTF-8 segfaults with -P
# 13may2015  +chris+  use directory only when more than two arguments
# 22feb2016  +chris+  line-buffered to quicker pipes
g() {
  local p=$argv[-1]
  (( ARGC > 1 )) && [[ -d $p ]] && { p=$p/; argv[-1]=(); } || p=''
  LC_ALL=C grep --exclude "*~" --exclude "*.o" --exclude "tags" \
    --exclude-dir .bzr --exclude-dir .git --exclude-dir .hg --exclude-dir .svn \
    --exclude-dir CVS  --exclude-dir RCS --exclude-dir _darcs \
    --exclude-dir _build \
    --line-buffered -r -P ${@:?regexp missing} $p
}

# d -- use g to find a definition (start of line, Go, Ocaml, Ruby, Rust)
# 07apr2014  +chris+
# 13may2015  +chris+
d() {
  g -Hn '(^|\b(#define|func|let|let rec|class|module|def|fn)\s+)'"$@" | sed 's/:/ /2'
}

# l -- find file names, recursively
# 20jun2012  +chris+  take a directory as possible last argument
l() {
  local p=$argv[-1]
  [[ -d $p ]] && { argv[-1]=(); } || p='.'
  find $p ! -type d | sed 's:^./::' | egrep "${@:-.}"
}

# v -- browse list of file names (stdin or arglist) with vim
# 14jul2015  +chris+
v() {{
  tput smcup
  { [[ $# = 0 ]] && cat || print -l -- "$@" } |
    vim - '+set nomod | map <buffer><C-M> <C-W>F<C-W>_' \
          '+silent g/\%^\%$/cq!'  # quit on empty file
} always {
  tput rmcup
}}
# this didnt understand file:line:
#   vim - '+set nomod | map <buffer><C-M> :1000sp <cfile><C-M>'

# vl -- browse l with vim/v
# 25mar2015  +chris+
# 14jul2015  +chris+
vl() { l "$@" | sort | v }

# lr -- a saner ls -R (using find)
# 07jun2013  +chris+
# 24oct2015  +chris+  prefer native implementation
(( $+commands[lr] )) ||
lr() {
  zparseopts -D -E S=S t=t r=r h=h U=U l=l F=F d=d
  local sort="sort -t/ -k2"                                # by name (default)
  local numfmt="cat"
  local long='s:[^/]* /::; s:^\./\(.\):\1:;'               # strip detail
  local classify=''
  [[ -n $F ]] && classify='/^d/s:$:/:; /^-[^ ]*x/s:$:*:;'  # dir/ binary*
  [[ -n $l ]] && long='s: /\(\./\)\?: :;'                  # show detail
  [[ -n $S ]] && sort="sort -n -k5"                        # by size
  [[ -n $r ]] && sort+=" -r"                               # reverse
  [[ -n $t ]] && sort="sort -k6" && { [[ -n $r ]] || sort+=" -r" } # by date
  [[ -n $U ]] && sort=cat                                  # no sort, live output
  [[ -n $h ]] && numfmt="numfmt --field=5 --to=iec --padding=6"  # human fmt
  [[ -n $d ]] && set -- "$@" -prune                        # don't enter dirs
  find "$@" -printf "%M %2n %u %g %9s %TY-%Tm-%Td %TH:%TM /%p -> %l\n" |
    $=sort | $=numfmt |
    sed '/^[^l]/s/ -> $//; '$long' '$classify
}
alias lr='lr -FG'
alias L='lr -FGl'
(( $+commands[lr] )) && alias l1='lr -FGl1' ||
l1() { lr -Fl "$@" -maxdepth 1; }
(( $+commands[lr] )) &&
lc() {
  lr -AFG1s  -t '!type == d || depth > 0' "$@" |git column --mode=dense --pad=2
}

# lwho - utmp-free replacement for who(1)
(( $+commands[lr] )) && lwho() {
  lr -om -t 'name =~ "[0-9][0-9]*$" && uid != 0' \
     -f '%u\t%p\t%CY-%Cm-%Cd %CH:%CM\n' /dev/pts /dev/tty*
}

# svi -- edit pipe stream with vim
# 24jul2015  +chris+
svi() { () { vim $1 </dev/tty >/dev/tty && cat $1 } =(cat) }

# pacgrep -- search arch package contents
# 21nov2011  +chris+
# 08dec2011  +chris+
pacgrep() {
  PATTERN=${1:?pattern missing}
  shift
  pacman -Qlq "$@" | xargs grep -d skip -e "$PATTERN"
}
_pacgrep() {
  _pacman  # force autoload
  _arguments : '1:pattern:' '*:package:_pacman_completions_installed_packages'
}
compdef _pacgrep pacgrep

# imv -- interactive rename, using vared
# 03sep2012  +chris+
# 21jul2014  +chris+
# 09dec2014  +chris+
imv() {
  local src dst
  for src; do
    [[ -e $src ]] || { print -u2 "$src does not exist"; continue }
    dst=$src
    vared dst
    [[ $src != $dst ]] && mkdir -p $dst:h && mv -n $src $dst &&
      print -s mv -n $src:q:q $dst:q:q   # save to history, thus M-. works
  done
}

# hl -- highlight regexps
# 06sep2012  +chris+
hl() { egrep --color=always -e '' -e${^*} }

# noq -- remove query string from filenames
# 01dec2012  +chris+
noq() { for f (${@:-*\?*}) mv -nv $f ${f%%\?*} }

# jkill -- kill all jobs of the current shell
# 23dec2012  +chris+
jkill() { kill "$@" %${(k)^jobstates} }

# k1 -- kill oldest job of the current shell
# 15dec2013  +chris+
k1() {
  local pids=${(j:,:)${jobstates#*:*:}%=*}
  kill "$@" ${(f)$(ps -o pid= --sort start -p $pids)[1]}
}

# jpid -- map job ids to pids
# 23dec2012  +chris+
jpid() {
  local p
  # $jobstates uses jobs.c:getjob() and can do %1 or %foo as well.
  for id; p+=(${${${jobstates[$id]}#*:*:}%=*})
  print $p
}

# zconvert -- zmv calling convert
# 05feb2013  +chris+
zconvert() {
  zparseopts -D n=n
  zmv -vf -W -p convert $n "-o ${*[1,-3]}" "$@[-2]" "$@[-1]"
}
alias zconvert='noglob zconvert'

# px -- verbose pgrep
px() { ps uwwp ${$(pgrep -d, "${(j:|:)@}"):?no matches} }

# crun -- compile and run .c program
crun() {
  local cprog=$1; shift
  local n=$@[(i)--]
  gcc -o ${cprog%.*} $cprog $@[1,n-1] && ./${cprog%.*} $@[n+1,-1]
}

# tracing -- run zsh function with tracing
# 16mar2016  +chris+  keep return code
tracing() {
  local f=$1; shift
  functions -t $f
  $f "$@"
  local r=$?
  functions +t $f
  return $r
}

# bins -- list all executable files in $PATH as called by basename
bins() {
  rehash
  whence -p ${(kon)commands}
}

# up [|N|pat] -- go up 1, N or until basename matches pat many directories
#   just output directory when not used interactively, e.g. in backticks
# 06sep2013  +chris+
up() {
  local op=print
  [[ -t 1 ]] && op=cd
  case "$1" in
    '') up 1;;
    -*|+*) $op ~$1;;
    <->) $op $(printf '../%.0s' {1..$1});;
    *) local -a seg; seg=(${(s:/:)PWD%/*})
       local n=${(j:/:)seg[1,(I)$1*]}
       if [[ -n $n ]]; then
         $op /$n
       else
         print -u2 up: could not find prefix $1 in $PWD
         return 1
       fi
  esac
}

# dnext/dprev -- go to next/prev directory at same level
dnext() {
  local d; d=( ../*(/) )
  cd ${d[d[(i)../$PWD:t]${1:-+1}]:?no such dir}
}
alias dprev='dnext -1'

# n -- quickest note taker
# 21nov2013  +chris+
n() { [[ $# == 0 ]] && tail ~/.n || echo "$(date +'%F %R'): $*" >>~/.n }
alias n=' noglob n'

# allowcore -- permit coredumps
# 11jan2014  +chris+
allowcore() {
  for pid in $(pgrep "$@"); do
    prlimit --core=unlimited --pid $pid
  done
}

# nf [-NUM] [COMMENTARY...] -- never forget last N commands
nf() {
  local n=-1
  [[ "$1" = -<-> ]] && n=$1 && shift
  fc -lnt ": %Y-%m-%d %H:%M ${*/\%/%%} ;" $n | tee -a .neverforget
}

# base NUM -- convert between bases
# 20jul2014  +chris+  zsh function
base() {
  setopt LOCAL_OPTIONS C_BASES OCTAL_ZEROES
  printf "%s = %08d %d 0%o 0x%x\n" $1 ${$(([#2] $1))#2\#} $(($1)) $(($1)) $(($1))
}

# count - count different lines
# 20jul2014  +chris+  zsh function
count() { sort "$@" | uniq -c | sort -n }

# f [FIELDS,FIELD-RANGE] - output nth fields
# 16mar2015  +chris+  zsh function
f() {
  perl -e '
    my $o = shift or do {print STDERR "Usage: $0 fields,field-range\n"; exit 1;};
    my @o = map { $_ > 0 ? $_-1 : $_ }
            map { /\d\K-/ ? $`..$'\'' : $_ }
            split ",", $o;
    
    while (<>) {
            chomp;
            print join(" ", (split)[@o]), "\n";
    }
  ' -- "$@"
}

# necho - a kind of sane echo
# 16mar2015  +chris+  zsh function
# 16mar2015  +chris+  split into three functions
# 18mar2015  +chris+  renamed from *utter
# 25mar2016  +chris+  jecho
necho() { for a; do printf '%s\n' "$a"; done; }
zecho() { for a; do printf '%s\0' "$a"; done; }
qecho() { for a; do printf $'\u00bb%s\u00ab ' "$a"; done; printf '\n'; }
jecho() { printf '%s' "$@"; }

# imgur - post image to imgur.com
# 20jul2014  +chris+  zsh function
# 01apr2016  +chris+  use api v3
imgur() {
  curl -H "Authorization: Client-ID 3e7a4deb7ac67da" -F image=@$1 \
    https://api.imgur.com/3/upload | sed 's/.*http/http/; s/".*/\n/; s,\\/,/,g'
}

# keep - poor man's version control, make freshly numbered copies
# 20jul2014  +chris+
keep() {
  local f v
  for f; do
    f=$f:A
    v=($f.<->(nOnN[1]))
    if [[ -n "$v" ]] && cmp $v $f >/dev/null 2>&1; then
      print -u2 $v not modified
    else
      cp -va $f $f.$((${${v:-.0}##*.} + 1))
    fi
  done
}

# sprunge FILES... - paste to sprunge.us
# 20jul2014  +chris+  zsh function
sprunge() {
  local f
  if [ $# -lt 2 ]; then
    cat "$@"
  else
    for f; do
      echo "## $f"
      cat "$f"
      echo
    done  
  fi | curl -sF 'sprunge=<-' http://sprunge.us | tr -d ' '
}

# ptpbpw FILE - paste to ptpb.pw
# 16sep2015  +chris+
ptpbpw() { curl -F "c=@${1:--}" https://ptpb.pw/ | grep -Po 'url: \K.*' }
alias pb=ptpbpw

# 0x0 FILE - paste to 0x0.st
# 16dec2015  +chris+
0x0() { curl -F "file=@${1:--}" https://0x0.st/ }

# stee - silent tee
# 20jul2014  +chris+  zsh function
# 24jun2015  +chris+  mkdir -p the target file directories
stee() { mkdir -p "$@:h" && tee "$@" >/dev/null }

# total [-F<sep>] [FIELDNUM] - sum up numbers in a column
# 20jul2014  +chris+  zsh function
total() {
  local F
  expr "$1" : -F >/dev/null && F=$1 && shift
  awk $F -v f=${1:-1} '{s+=$f} END{print s}'
}

# unfmt - convert paragraphs into long lines
# 20jul2014  +chris+  zsh function
# 15dec2014  +chris+  simplify
unfmt() { perl -00pe 's/\s*\n\s*/ /g; s/\s*\Z/\n/;' -- "$@" }

# zombies - list all zombies and their parents to kill
# 23jul2014  +chris+  zsh function
zombies() {
  ps f -eo state,pid,ppid,comm | awk '
    { cmds[$2] = $NF }
    /^Z/ { print $(NF-1) "/" $2 " zombie child of " cmds[$3] "/" $3 }'
}

# zpass - generate random password
# 01nov2014  +chris+
zpass() {
  LC_ALL=C tr -dc '0-9A-Za-z_@#%*,.:?!~' </dev/urandom | head -c${1:-10}
  echo
}

# cde - cd to working directory of current emacs buffer
# 11nov2014  +chris+
cde() {
  cd ${(Q)~$(emacsclient -e '(with-current-buffer
                               (window-buffer (selected-window))
                               default-directory) ')}
}

# null - throw away input
# 01dec2014  +chris+
null() { tr -cd '' }

# absolute [FILE...] - print absolute file name/PWD
# 02dec2014  +chris+
absolute() { print -l ${${@:-$PWD}:a} }

# homediff FILE
# 02dec2014  +chris+
homediff() {
  diff -u "${1?no file given}" <(curl -s http://chneukirchen.org/dotfiles/$1)
}

# ssh-copy-term - copy terminfo via ssh
# 10dec2014  +chris+
ssh-copy-term() {
  infocmp $TERM | ssh "$@" 't="$(mktemp)" && cat >"$t" && tic -s "$t"'
} 

# cppdef - print predefined C macros
# 09mar2015  +chris+
# 31mar2016  +chris+  use $1 as cc
cppdef() { ${1:-cc} $@[2,-1] -dM -E - </dev/null }

# ltime - start and run time of last commands
ltime() { fc -liDI | tail -${1:-10} }

# zapply [-jN] [-iv] CMD... -- ARGS... - run up to N CMD in parallel with ARGS
#   CMD will be run as zsh command if it contains a $
#   without explicit '--', assume CMD is first argument
#   {} (or $1) may be used to access argument
# 01apr2015  +chris+
zapply() {
  local s="$@[(i)--]" xopt=
  (( s > $# )) && argv[2]=(-- "$argv[2]") && s=2
  zparseopts -D -M -A xopt n: p t P: j:=P v=t i=p   # map to xargs(1) flags
  (( $@[(i){}] < s )) && xopt[-I]={}
  [[ $1 = *'$'* ]] && argv[1]=(zsh -c "$1" --) && (( s += 3 ))
  printf '%s\0' "$@[s+1,-1]" | xargs -0 -r -n1 ${(kv)=xopt} "$@[1,s-1]"
}

# gman - format manpage using GNU troff
# 10apr2015  +chris+
gman() {
  ( man -w "$@" 2>/dev/null || printf '%s\n' "$@" ) |
    xargs cat |
    groff -t -p -I/usr/share/man -Tutf8 -mandoc | less
}

# myman - format manpage of own projects
# 22feb2016  +chris+
myman() { locate -0 -e $HOME/*/$1.[0-9] | xe -0RN0 man -l }

# soak [OUTPUT] - write stdin to OUTPUT (or stdout), not clobbering OUTPUT.
# Also don't clobber on empty input.
# 03may2015  +chris+
soak() {
  perl -we 'undef $/; my $s = <STDIN>;
            $ARGV[0] and $s and open(STDOUT, ">", $ARGV[0]) || die "soak: $!\n";
            print $s;' -- "$@"
}

# inp [FILE] [FILTER...] - run FILTER in-place on FILE
# 16mar2016  +chris+
inp() { () { "$@[3,-1]" <$2 >$1 && [[ -s $1 ]] && mv $1 $2 } =(:) "$@" }

# sslcat HOST:PORT - print SSL certificate and details
sslcat() {
  local cert="$(openssl s_client -connect $1 </dev/null | awk '/^--*BEGIN/,/^--*END/')"
  printf '%s\n' "$cert" | openssl x509 -in /dev/stdin -text
  printf '%s\n' "$cert" | openssl x509 -in /dev/stdin -noout -sha1 -fingerprint
  printf '%s\n' "$cert" | openssl x509 -in /dev/stdin -noout -md5 -fingerprint
}

# wrap ping to call ping6 on -6
# 08aug2015  +chris+
ping() {
  if [[ "$1" = -6 ]]; then
    shift
    command ping6 "$@"
  else
    command ping "$@"
  fi
}

# clot - fill screen with garbage, as visual separator
# 17aug2015  +chris+
# 11mar2016  +chris+ print seperate lines
clot() {
  head -c $((LINES*COLUMNS)) </dev/urandom | tr '\0-\377' ${(l:256::.*o@:)} |
    fold -w $COLUMNS
}

# mdless - read markdown with less
mdless() { pandoc -s -f markdown_github -t man "$@" | man -l }

# mcal [MONTH] - show calendar for this year's MONTH
mcal() { cal "$@" $(date +%Y) }

# padd [CMD] - add alias to CMD
padd() { alias "$1:t=$1:A" }

# ghtodo - convert lines into a github todo format
# 09jan2016  +chris+
ghtodo() { sed '/./s/^/- [ ] /' }

# cdate - timestamp in my format
# 09jan2016  +chris+
cdate() { print ${(L)${(%):-%D{%d%b%Y}}} " +$USER+" }

# cat0 - print nul-delimited data linewise
cat0() { tr '\000' '\012' }

# faketty - run command such that isatty() is true
faketty() { script -qfc "${(j: :)${(q)@}}" /dev/null }

# zz - smart directory changer
# 14dec2015  +chris+
# 15dec2015  +chris+ clean up nonexisting paths
chpwd_zz() {
  print -P '0\t%D{%s}\t1\t%~' >>~/.zz
}
zz() {
  awk -v ${(%):-now=%D{%s}} <~/.zz '
    function r(t,f) {
      age = now - t
      return (age<3600) ? f*4 : (age<86400) ? f*2 : (age<604800) ? f/2 : f/4
    }
    { f[$4]+=$3; if ($2>l[$4]) l[$4]=$2 }
    END { for(i in f) printf("%d\t%d\t%d\t%s\n",r(l[i],f[i]),l[i],f[i],i) }' |
      sort -k2 -n -r | sed 9000q | sort -n -r -o ~/.zz
  if (( $# )); then
    local p=$(awk 'NR != FNR { exit }  # exit after first file argument
                   { for (i = 3; i < ARGC; i++) if ($4 !~ ARGV[i]) next
                     print $4; exit }' ~/.zz ~/.zz "$@")
    [[ $p ]] || return 1
    local op=print
    [[ -t 1 ]] && op=cd
    if [[ -d ${~p} ]]; then
      $op ${~p}
    else
      # clean nonexisting paths and retry
      while read -r line; do
        [[ -d ${~${line#*$'\t'*$'\t'*$'\t'}} ]] && print -r $line
      done <~/.zz | sort -n -r -o ~/.zz
      zz "$@"
    fi
  else
    sed 10q ~/.zz
  fi
}
alias z=' zz'

# collect all chpwd_* hooks
chpwd_functions=( ${(kM)functions:#chpwd?*} )

# == SPECIAL ENVIRONMENTS

case "$TERM" in
  9term|win)
    chpwd() { awd }
    ;&
  network|dumb)
    export LS_COLORS=
    zstyle -d ':completion:*' list-colors
    zstyle -d ':completion:*:default' list-colors
    alias ls="LC_COLLATE=C /bin/ls -F --color=never"

    setopt SINGLE_LINE_ZLE NO_PROMPT_CR NO_BASH_AUTO_LIST
    _expand_or_complete_newline() {
      zle expand-or-complete
      echo
      zle reset-prompt
    }
    zle -N expand-or-complete-newline _expand_or_complete_newline
    bindkey "^D" expand-or-complete-newline
    export PAGER=cat
    export GIT_PAGER=cat

    PS1='%m%(?.. %??)%(1j. %j&.) %${NDIRS:-2}~%#${SSH_CLIENT:+%#} '

    alias vi="TERM=xterm gvim -p"
    alias vim=vi
    alias lf="9 lc -F"
esac

# Interactive zsh, but automatically execute given command.
# zsh -is eval $COMMAND
# c.f. http://www.zsh.org/mla/users/2005/msg00599.html
# 12jan2013  +chris+
if [[ $1 == eval ]]; then
  shift
  ICMD="$@"
  set --
  zle-line-init() {
    BUFFER="$ICMD"
    zle accept-line
    zle -D zle-line-init
  }
  zle -N zle-line-init
fi