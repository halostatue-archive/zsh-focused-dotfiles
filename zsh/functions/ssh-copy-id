#autoload -U

# Shell script to install your public key on a remote machine. Takes the remote
# machine name as an argument. Obviously, the remote machine must accept
# password authentication or one of the other keys in your ssh-agent for this
# to work.
local -a idfiles agent identities help
idfiles=()
agent=()
identities=()
help=()

zparseopts -D -E -K -a idfiles \
  id+: -id+: agent=agent -agent=agent h=help -help=help

if (( ${#help} )) || ! (( ${#argv} )); then
  cat >&2 <<EOS
Usage: $(basename ${0}) [[-id IDFILE]+|[-agent]] [user@]machine [ssh-args]

Copies one or more SSH identities from this computer to the remote computer.

The flag '-id IDFILE' specifies a local identity file or a pattern of
identity files to be copied to the remote computer. If "IDFILE" has a file
next to it called "IDFILE.pub", the "IDFILE.pub" file will be used for the
identity. 'id IDFILE' may be specified multiple times, but may not be used
with '-agent'.

The flag '-agent' specifies that 'ssh-agent -L' should be used to obtain
the identities that will be sent to the remote computer. Note that all
found identities will be sent. '-agent' cannot be used with '-id IDFILE'.

When neither '-id IDFILE' nor '-agent' have been specified, then one of
'~/.ssh/id_rsa.pub' or '~/.ssh/id_dsa.pub' will be used (in that order),
if they exist. If neither exists, an error will be raised.

EOS
  if (( ${#help} )); then
    return 0
  else
    return 5
  fi
fi

if (( ${#idfiles} )) && (( ${#agent} )); then
  cat >&2 <<EOS
error:$(basename ${0}):${LINENO}: One source of identities only.
      Cannot specify both identity files and ssh-agent identities.
EOS
  return 1
fi

if (( ${#idfiles} )); then
  for (( i=${#idfiles}; i > 0; --i )); do
    case ${idfiles[${i}]} in
      --identity|-identity|--id|-id)
        idfiles[${i}]=()
        ;;
      *)
        local -a files
        for idf (${~idfiles[${i}]}(.N:A)); do
          if [ -f "${idf}.pub" ]; then
            files=(${files} ${idf}.pub)
          else
            files=(${files} ${idf})
          fi
        done
        set +x
        idfiles[${i}]=(${files})
        ;;
    esac
  done

  for idfile (${idfiles}); do
    if [[ -f ${idfile} ]]; then
      contents=$(< ${idfile})
      identities=(${identities} ${(qq)contents})
    fi
  done
elif (( ${#agent} )); then
  if [[ -n "${SSH_AUTH_SOCK}" ]] && try ssh-add -L; then
    ssh-add -L | while read identity; do
      identities=(${identities} ${(qq)identity})
    done
  fi
elif [ -f "${HOME}/.ssh/id_rsa.pub" ]; then
  contents=$(< "${HOME}/.ssh/id_rsa.pub")
  identities=(${identities} ${(qq)contents})
elif [ -f "${HOME}/.ssh/id_dsa.pub" ]; then
  contents=$(< "${HOME}/.ssh/id_dsa.pub")
  identities=(${identities} ${(qq)contents})
else
  cat >&2 <<EOS
error:$(basename ${0}):${LINENO}: No identities found.
EOS
  return 2
fi

if ! (( ${#identities} )); then
  cat >&2 <<-EOS
error:$(basename ${0}):${LINENO}: No identities found.
EOS
  return 2
fi

typeset -U identities

echo ${(F)${(Q)identities}} | ssh ${argv} "umask 077; test -d ~/.ssh || mkdir ~/.ssh ; cat >> ~/.ssh/authorized_keys" || return 10

cat <<EOS
Now try logging into the machine, with "ssh '${argv}'", and check in:

  ~/.ssh/authorized_keys

to make sure we haven't added extra keys that you weren't expecting.
EOS

return 0
