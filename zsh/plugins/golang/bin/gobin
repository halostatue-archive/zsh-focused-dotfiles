#! /usr/bin/env ruby

class Info
  attr_reader :command, :status, :url, :reason, :details

  def initialize(name)
    @command = name
    @status = nil
    @details = []
  end

  def detail(tuple_line)
    if tuple_line =~ %r{^\t(?<status>.+): (?<url>\S+)(?:$| \((?<reason>.+)\)$)}
      @status = true
      @details << Regexp.last_match
    end
  end

  def stale?
    status == 'stale'
  end

  def format
    "#{command}\n#{format_details}"
  end

  def format_details
    details.map { |detail|
      str = "\t#{detail[:status]}: #{detail[:url]}"
      str = "#{str} (#{detail[:reason]})" if detail[:reason]
      str
    }.join("\n")
  end

  def resolve!
    reason = @details.min { |a, b| a[:url].length <=> b[:url].length }
    @status = reason[:status]
    @url = reason[:url]
    @reason = reason[:reason]&.strip
  end

  def inspect
    "<#{command}@#{url} #{status} =#{reason}>"
  end
end

stale = %x(binstale).split($/).map(&:chomp).each_with_object({}) { |line, info|
  case line
  when /^\t\(no source package found\)/
    info.delete(:current) unless info[:current].status
  when /^\t/
    raise 'Details before command.' unless info[:current]
    info[:current].detail(line)
  when /^\S+$/
    info[:current] = info[line] = Info.new(line)
  end
}
stale.each_value(&:resolve!)

if ARGV[0].nil?
  puts stale.each_value.map(&:format)
elsif stale.key?(ARGV[0].downcase)
  puts stale[ARGV[0].downcase].format
elsif ARGV[0].downcase == 'stale'
  puts stale.each_value.select(&:stale?).map(&:format)
elsif ARGV[0] =~ /^(?:home|browse|open)$/i
  if ARGV[1].nil?
    $stderr.puts 'Will not open all home URLs at once.'
    exit 1
  elsif not stale.key?(ARGV[1])
    $stderr.puts "No known binary '#{ARGV[1]}'."
    exit 2
  end

  bin = stale[ARGV[1]]
  puts "Opening #{bin.format}"

  exec 'open', "https://#{bin.url}"
elsif ARGV[0].downcase == 'update'
  if ARGV[1].nil?
    $stderr.puts 'Need a binary to update.'
    exit 1
  elsif not stale.key?(ARGV[1])
    $stderr.puts "No known binary '#{ARGV[1]}'."
    exit 2
  end

  bin = stale[ARGV[1]]
  puts "Updating #{bin.format}"

  exec 'go', 'get', '-u', bin.url
else
  $stderr.puts "Unknown command '#{ARGV[0]}'."
  exit 3
end
