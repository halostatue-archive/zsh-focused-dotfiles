#autoload -U

function --with-keg-openssl-save()
{
  local var val
  var=${1}
  val=${2}

  (( ${+parameters[save_${var}]} )) || eval "declare -ga save_${var}"
  eval "save_${var}+=('${(P)var}')"
  eval "${var}='${val}'"
  eval "export ${var}"
}

function --with-keg-openssl-restore()
{
  local var val sva
  local -i i

  for var ("${@}"); do
    sva=save_${var}
    i=${#${(P)sva}}
    val=${(P)sva[${i}]}

    eval "${sva}[${i}]=()"

    if [[ -z "${val}" ]]; then
      eval "unset ${var}"
    else
      eval "${var}='${val}'"
    fi
  done
}

function --with-keg-openssl-run()
{
  --with-keg-openssl-save OPENSSL_ROOT_DIR "${root}"
  --with-keg-openssl-save OPENSSL_LIB_DIR "${root}"/lib
  --with-keg-openssl-save OPENSSL_INCLUDE_DIR "${root}"/include

  local -i result
  if (( ${#} )); then
    "${@}"
    result=${?}
  else
    echo OPENSSL_ROOT_DIR "${root}"
    echo OPENSSL_LIB_DIR "${root}"/lib
    echo OPENSSL_INCLUDE_DIR "${root}"/include
    "${SHELL}"
    result=${?}
  fi

  --with-keg-openssl-restore OPENSSL_{ROOT,LIB,INCLUDE}_DIR

  return "${result}"
}

local root

if has-keg openssl; then
  root=$(brew --prefix openssl)
else
  builtin print "Keg OpenSSL is not installed" >&2
fi

--with-keg-openssl-run "${@}"
