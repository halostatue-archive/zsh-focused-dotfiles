#! /usr/bin/env ruby

# Based loosely on a shell script by Dominic Mitchell on Stack Overflow.
# http://stackoverflow.com/questions/3217152/in-perforce-how-can-i-delete-files-from-a-directory-in-my-workspace-where-the-fil/3224798#3224798
#
# Changed to Ruby because the awk scripting was too fragile and I'm not a
# Python programmer.

require 'rubygems'
require 'rmarshal'
require 'set'
require 'stringio'
require 'find'

def p4(arguments)
  result = []
  sio    = StringIO.new(%x(p4 -G #{arguments}))
  loop do
    break if sio.eof?

    begin
      item = unmarshal(sio)
    rescue
      next
    end

    raise "P4 error: #{item["data"]}" if item["code"] == "error"
    result << item
  end

  result
end

def p4_have_path
  Set.new((p4 "have").map { |item| item["path"] })
end

def p4_dirs(path = "//*")
  (p4 %Q(dirs "#{path}")).map { |item| item["dir"] }
end

def p4_info
  (p4 "info").first
end

def disk_files
  client_root  = p4_info["clientRoot"]
  client_files = p4_dirs.map { |dir|
    dir      = dir.sub(%r{^//}, '')
    dir_path = File.join(client_root, dir)
    files    = []

    if File.exist? dir_path
      Find.find(dir_path) { |path|
        next if File.directory? path
        files << path
      }
    end
    files
  }.flatten
  Set.new(client_files)
end

if __FILE__ == $0
  _mode = _print = _ignore = nil
  _sort = false

  ARGV.each do |arg|
    case arg
    when /^--?(?:print)?0/
      _print = lambda { |entry| print "#{entry}\0" }
    when /^--?missing/
      _mode = :missing
    when /^--?nothave/
      _mode = :nothave
    when /^--?sort/
      _sort = true
    when /^--?ignore=(.*)/
      _ignore = /#{$1}/
    when /^--?ignore-cmake-build/
      _ignore = /(?:\w+-(?:Release|Debug|RelWithDebInfo))/
    end
  end

  _print = lambda { |entry| puts entry } if _print.nil?
  _mode  = :nothave if _mode.nil?

  have = p4_have_path
  disk = disk_files

  files = case _mode
          when :missing
            have - disk
          when :nothave
            disk - have
          end
  files = files.to_a

  files.reject! { |file| file =~ _ignore } if _ignore

  files.sort! if _sort
  files.each &_print
end
