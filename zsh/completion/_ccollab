#compdef ccollab

# Code Collaborator completion.
# Maintainer: Austin Ziegler <austin@halostatue.ca>
#
# Based originally on _perforce by Peter Stephenson <pws@csr.com>.

# Styles, tags and contexts
# =========================
# If the 'verbose' style is set (it is assumed by default), verbose
# descriptions are provided for many completed quantities derived
# dynamically such as subcommand names, labels, changes -- in fact,
# just about anything for which ccollab itself produces a verbose,
# one-line description. It may be turned off in the context of each
# subcommand e.g.
#   zstyle ':completion:*:ccollab-labelsync:*' verbose false
# or for a particular tag, e.g. changes,
#   zstyle ':completion:*:changes' verbose false
# or just for top-level completion (i.e. up to and including completion
# of the subcommand):
#   zstyle ':completion:*:ccollab:*' verbose false
# or for ccollab as a whole,
#   zstyle  ':completion:*:ccollab(-*|):*' verbose false
# This is actually handled by the '_describe' function underneath the
# ccollab completion system; it's mentioned here as verbosity adds
# significantly to a lot of the ccollab completions.
#
# Note that completing change numbers is not very useful if 'verbose' is
# turned off. There is no speed advantage for turning it off, either.
# (Changes are also known as changelists or changesets. The functions
# and tags here all consistently use 'changes'.)
#
# The style 'max' can be set to a number which limits how many
# possibilities can be shown when selecting changes or jobs. This is
# handled within ccollab, so the completion code may limit the number even
# further. If not set explicitly, the value is taken to be 20 to avoid a
# huge database being output. Set it to a larger number if necessary.
# Setting it explicitly to zero removes the maximum. Because you see only
# the most recent, changes and jobs are shown in the order given by
# ccollab without further sorting.
#
# Completion of jobs can also be controlled by the 'jobview' style.
# This uses the standard ccollab JobView syntax, and is applied
# in connection with the 'max' style. In other words,
# if you set
#   zstyle ':completion:*:ccollab-*:jobs' max 0
#   zstyle ':completion:*:ccollab-*:jobs' jobview 'user=pws'
# then jobs to be completed will be those from the output of
#   ccollab jobs -e 'user=pws'
# i.e. those assigned to ccollab user 'pws'.
#
# Completion of changes can be controlled by the 'changes' style.
# This takes additional arguments to be passed to 'ccollab changes'.
# An obvious example is:
#   zstyle ':completion:*:ccollab-*:changes' changes -u $USER
# to limit changes to the present user.
#
# The style 'all-files' is used to tell the completion system to
# complete any file in a given context. This is for use in places
# where it would, for example, only complete files opened for editing.
# See the next section for more.
#
# The style 'depot-files' tells the system to complete files by asking
# ccollab for a list where it would otherwise complete files locally by
# the standard mechanism --- basically any time you don nott use // notation
# and there is no restriction e.g. to opened files only. There is likely
# to be a significant speed penalty for this; it is turned off by default
# in all contexts. The advantage is that it cuts out files not maintained
# by ccollab. (Again, note this is a style, not a tag.)  Contexts
# where this might be particularly useful include ccollab-diff or ccollab-diff2.
#
# The tags depot-files and depot-dirs also exist; they are used whenever
# the system is completing files or directories by asking ccollab
# to list them, rather than by using normal file completion.
#
# The tag subdirs is used to complete the special '...' which tells
# ccollab to search all subdirectories. Hence you can turn this
# feature off by suitably manipulating your tags.
#
# The function will usually try to limit the files it lists by
# context; for example, to just opened files. By default it does
# this by retrieving the complete list from ccollab and then
# relying on the completion system to do the matching. If this is
# slow, it is possible to set the style "glob", in which case the
# matching is done within ccollab, potentially reducing the amount of
# searching of ccollab's internal database. The tag used for
# this is the same as the command used to retrieve the file name:
# integrated, opened, resolved, dirs, files. The disadvantage
# of doing the matching within ccollab is that no matcher specification
# is applied; for example, it's not possible to match a_u.c against
# admin_utils.c.
#
# Actually, a hybrid strategy is used when the glob style is not set: the
# directory is passed literally to ccollab, but the file or directory
# being matched is passed as "*", so that matching on the contents of the
# directory is performed by the completion system.
#
# Experiment suggests that the glob style is not usually needed: only
# "ccollab integrated" is likely to be significantly slowed if no limiting
# pattern is applied, and completing only integrated files is uncommon.

# Completion of files and their revisions
# =======================================
# File completion handles @ and # suffixes. If the filename is completed,
# typing @ or # removes the space which was automatically added.
# The context used has 'at-suffix' or 'hash-suffix' in the position
# before the tag to indicate suffix completion (as always, ^Xh will
# show you all possible contexts). This makes it possible
# to select changes, dates, labels and clients using the tag-order
# style. For example,
#    zstyle ':completion:*:ccollab-*:at-suffix:*' tag-order changes '*'
# will force all completion after '@' to show changes first. Executing
# _next_tags (usually ^x^n) will cycle between that and the remaining
# tags (dates, labels, clients). I recommend, at least, keeping labels
# later than changes since the former are less useful and can take a long
# time to complete.
#
# A '#' is automatically quoted when handled in this way; if the file is typed by
# hand or the completion did not finish (e.g. you typed a character in the
# middle of menu completion), you probably need to type '\#' by hand. The
# problem is that the completion system uses extended globbing and hence a
# pattern of the form 'filename#' always matches 'filename' (since e# matches
# any number of e's including one). Hence this can look like an expansion which
# expands to 'filename'.
#
# After @, you can complete changes (note the use of the style 'max'
# above), labels, clients or even dates, while after '#' you can
# complete numeric revisions or the special revision names head, none,
# have. These are available whether or not you completed the filename; if
# the file does not exist, numeric revisions will not work, but the rest will
# (though what ccollab will do with the resulting command is another matter).
#
# In addition, when completing after 'file@', only changes specific to 'file'
# will be shown (exactly the list of changes ccollab shows from the
# command 'ccollab changes file'). If this does not work, chances are that
# 'file' does not exist. Having a multi-directory match (literal '...')
# in 'file' should work fine, since 'ccollab changes' recognises all normal
# ccollab file syntax.
#
# Some ccollab commands allow you to specify a range of revisions or
# changes as 'file@1,@2' or 'file#1,#2'. Currently, the second part of the
# revision range can always be completed (whether the command accepts them
# or not), but the comma after the first part of the range is only added
# automatically if the documentation suggests the command accepts ranges at
# that point. This is an auto-removable suffix, so it will disappear if
# you hit space or return. Typing a '#' at this point will insert a
# backslash, as before. The # and @ are never added automatically; you
# have to select one by hand.
#
# ccollab allows change and revision numbers to be preceded by =, <, <=, >
# or >=. See 'ccollab help undoc' for details. (In particular, '=' is
# an extremely useful shortcut when integrating single changes.)
# This syntax is handled, but currently the < and > must be quoted
# with a backslash, not by any other mechanism. For example,
#   ccollab files myfile@\>=3<TAB>
# will complete a change number. The valid syntax where the second
# change or revision in a range does not have the @ or # in front
# (for example 'file@32183,32185') is not currently handled; the @
# must be repeated.
#
# File completion for some functions is restricted by the ccollab
# status of the file; for example, 'ccollab opened' only completes opened
# files (surprised?)  However, you can set the style (N.B. not tag)
# 'all-files'; so, for example, you can turn off the limit in this case by
#   zstyle ':completion:*:ccollab-opened:*' all-files true
# Normally the 'file-patterns' style would be used to control matching,
# but as the file types are not selected by globbing it does not work here
# However, if you set the all-files style, all filename completion is done
# by the standard mechanism; in this case, the 'file-patterns' style works
# as usual. The style 'ignored-patterns' is available in any case, even
# without 'all-files'; this is therefore generally the one to use.
#
# The style 'whole-path' allows you complete the entire path to a file
# at once. This is useful in cases such as opened files where the
# list of files is likely to be short but may include files with
# widely different paths. As with the 'glob' style, the tag is the
# ccollab disposition of the file: integrated, opened, resolved, dirs,
# files. For example, with
#   zstyle ':completion:*:ccollab-revert:*:opened' whole-path true
# completion after 'ccollab revert' will offer you the entire depot path
# to a file rather than just part of the path at once (with the
# usual methods of disambiguation). Directory completion is turned
# off during a 'whole-path' completion. The 'whole-path' style can
# also take the value 'absolute'; this means that an initial '/'
# activates 'whole-path' completion, otherwise a relative file path
# will be completed in the normal way. For example, with
#   zstyle ':completion:*:ccollab-revert:*:opened' whole-path absolute
# then after 'ccollab revert <TAB>' you are offered open files in the
# current directory plus directories; after 'ccollab revert /<TAB>' you
# are offered all open files in depot syntax.
#
# With 'ccollab diff', the shell will spot if you have used an option that
# allows you to diff unopened files (such as -f) and in that case offer
# all files; otherwise, it just offers opened files.

# Completion of changes
# =====================
# There is various extra magic available any time change numbers
# are completed, regardless of how this was reached, i.e.
# 'ccollab fixes -c ...' and 'ccollab diff filename.c@...' are treated the same way.
# Note, however, these only work if you are at the point where a change
# number would be completed.
#
# Firstly, as mentioned above there is a maximum for the number of
# changes which will be shown, given by the style max, or defaulting to 20.
# Only the most recent changes will be shown. This is to avoid a speed
# penalty or clumsy output. If a positive numeric argument is given
# when changes are being completed, the maximum is set (unconditionally)
# to that number instead.
#
# It is also possible to give a negative numeric prefix to a listing widget
# (i.e. typically whatever is bound to ^D). If there is already a change
# number on the line, e.g. from cycling through a menu of choices, the full
# description for that change is shown in the format of a completion
# listing. [TODO: this could be made configurable with a style.]
#
# It may be necessary to abandon the current completion attempt before
# typing this to force the completion system to display the new text.
# Replacing delete-char-or-list with the following user defined widget
# (create with 'zle -N ...') will force this for any negative prefix argument.
#    (( ${NUMERIC:-0} < 0 )) && (( CURSOR = CURSOR ))
#    zle delete-char-or-list

# Completion of jobs
# ==================
# Completing jobs uses the same logic for the numeric prefix as completing
# changes: a positive prefix changes the maximum number of jobs which
# will be shown, and a negative prefix when listing shows the full
# text for the job whose name is currently inserted on the command line.
# In this case, the entire text of the word being completed is assumed
# to constitute the job name (which is almost certainly correct).

# Completion of dates
# ===================
# In a file revision specification it is possible to give a date
# in the form file@YYYY/MM/DD:hh:mm:ss, which may be completed. This
# is ever so slightly less silly than it sounds. Any component entered
# by hand with the appropriate suffix will be ignored; any component
# completed will be set to the current value. Hence you can easily
# specify, say, one month ago by using the completed value for all
# components except the month and setting that to one less. The shell
# will also happily append the appropriate suffix if you try to complete
# after anything which is already the appropriate width. (ccollab
# supports two-digit years, but these are confusing and no longer
# particularly useful as they refer to the twentieth century, so
# the shell does not.)

# Calls to ccollab
# ===========
# Much of the information from ccollab is provided by calls to ccollab
# commands. This is done via the _call_program interface, as described
# in the zshcompsys manual page. Hence a suitable context with the
# 'command' style allows the user to take control of this call.
# The tags used are the name of the ccollab command, or in the case of
# calls to help subcommands, 'help-<subcommand>'. Note that if the
# value of the style begins with '-', the arguments to the ccollab
# command are appended to the remaining words of the style before calling
# the command.

# Programmes taking ccollab-style arguments
# ====================================
# It is possible to use the _ccollab completion with other commands
# which behave like a subcommand of ccollab by setting the service type
# to ccollab-<subcommand>. For example,
#   compdef _ccollab ccollabcvsmap=ccollab-files
# says that the command 'ccollabcvsmap' takes arguments like 'ccollab files'.
# Often the options will be different; if this is a problem, you
# will need to write your own completer which loads _ccollab and
# calls its functions directly. You can add -global to the end
# of the service to say that the command also handles global
# ccollab options, comme ca:
#   compdef _ccollab ccollabreopen=ccollab-job-global
#
# Anything more complicated should be modelled on one of the
# _ccollab_cmd_* handlers below. To get this to work, the full
# set of _ccollab functions must be loaded; because of the way
# autoloading works, a trick is required:  call "_ccollab -l" which
# causes the function to be executed, loading all the associated
# functions as a side effect, but tells _ccollab to return without
# generating any completions. For example, here is the completion
# for my 'ccollabdesc' function which is an enhanced version of 'ccollab describe'
# (without any handling for global ccollab arguments):
#
#  #compdef ccollabdesc
#
#  _ccollab -l
#
#  _arguments -s : \
#    '-d-[select diff option]:diff option:((b\:ignore\ blanks c\:context d\:basic\ diff n\:RCS s\:summary u\:unified w\:ignore\ all\ whitespace))' \
#    '-s[short form]' \
#    '-j[select by job]:job:_ccollab_jobs' \
#    '*::change:_ccollab_changes'
#
# To add handling of global options to this, see the end of the _ccollab
# function below. Something like:
#
#   local -a _ccollab_global_options _ccollab_option_dispatch_a
#   if _ccollab_global_options; then
#     _arguments -s : $_ccollab_option_dispatch_ \
#       '<other stuff>'
#   fi

# TODO
# ====
# No mechanism is provided for completely ignoring certain files not
# handled by ccollab as with .cvsignore. This could be done ad hoc.
# However, the ignored-patterns style and the parameter $fignore are
# of course applied as usual, so setting ignored-patterns for the
# context ':completion:*:ccollab[-:]*' should work.

_ccollab() {
  # rely on localoptions
  setopt nonomatch
  local ccollabcmd==ccollab match mbegin mend
  integer _ccollab_cmd_ind

  if [[ $1 = -l ]]; then
    # Run to load _ccollab and associated functions but do
    # nothing else.
    return
  fi

  if [[ $ccollabcmd = '=ccollab' ]]; then
    _message "ccollab executable not found: completion not available"
    return
  fi

  # If we are at or after the command word, remember the global arguments to
  # ccollab as we will need to pass these down when generating completion
  # lists.
  #
  # This is both an array and a function, but luckily I never
  # get confused...
  local -a _ccollab_global_options_a
  local -a _ccollab_option_dispatch_a

  # If we are given a service of the form ccollab-cmd, treat this as if it was
  # after 'ccollab cmd'. This provides an easy way in for scripts and functions
  # that emulate the behaviour of ccollab subcommands. Note we do not shorten
  # the command line arguments.
  if [[ $service = ccollab-(#b)(*) ]]; then
    local curcontext="$curcontext"
    local ccollabcmd=$words[1] cmd=$match[1] gbl

    if [[ $cmd = (#b)(*)-global ]]; then
      # Handles global options.
      cmd=$match[1]
      _ccollab_global_options && gbl=1
    fi
    if (( $+functions[_ccollab_cmd_$cmd] )); then
      curcontext="${curcontext%:*:*}:ccollab-${cmd}:"
      if [[ -n $gbl ]]; then
        # We are handling global ccollab options as well as the arguments to
        # the specific command. To handle the latter, we need the command name,
        # plus all the arguments for the command with the global options
        # removed. The function _ccollab_service_dispatch handles this by
        # unshifting the command ($ccollabcmd) into words, then dispatching for
        # the ccollab subcommand $cmd.
        #
        # Has anyone noticed this is getting rather complicated?
        _arguments -s : $_ccollab_option_dispatch_a \
          "*::ccollab-$cmd arguments: _ccollab_service_dispatch $ccollabcmd $cmd"
      else
        _ccollab_cmd_$cmd
      fi
      # Do not try to do full command handling.
      return
    else
      _message "unhandled _ccollab service: $service"
      return 1
    fi
  fi

  if _ccollab_global_options; then
    _arguments -s : $_ccollab_option_dispatch_a \
      '1:ccollab command:_ccollab_commands'
  else
    (( _ccollab_cmd_ind-- ))
    (( CURRENT -= _ccollab_cmd_ind ))
    shift $_ccollab_cmd_ind words
    _ccollab_command_args
  fi
}

# Command and argument dispatchers

# Front end to _call_program to add in the global arguments passed to ccollab.
# The first argument is the tag, the remaining arguments are passed to ccollab.
# Typically the tag is the same as the first ccollab argument.
(( $+functions[_ccollab_call_ccollab] )) ||
_ccollab_call_ccollab() {
  local cp_tag=$1
  shift
  # This is for our own use for parsing, and we need English output, so...
  _call_program $cp_tag ccollab "${_ccollab_global_options_a[@]}" "$@"
}

(( $+functions[_ccollab_gen_global_options_list] )) ||
_ccollab_gen_global_options_list() {
  (( ${+_ccollab_global_options_list} )) || typeset -ga _ccollab_global_options_list
  (( ${#_ccollab_global_options_list} )) && return

  local line c_desc c_opt c_name c_scm c_has_parameter

  _ccollab_global_options_list=()

  # The options we support in the form for _arguments.
  # This is here for modularity and convenience, but note that since the
  # actual dispatch takes place later, this is not local to this
  # function and so must be made local in the caller.
  _ccollab_call_ccollab global-options help global-options 2>&1 | while read line; do
    has_parameter=0
    [[ $line =~ "^\((.*) only\)" ]] && c_scm=$match[1]

    if [[ $line =~ "^--([^[:space:]]+)" ]]; then
      c_name=$match[1]

      if [[ $line =~ "[[:space:]]+<value>[[:space:]]+(.*)$" ]]; then
        c_desc=${match[1]}
        has_parameter=1
      elif [[ $line =~ "[[:space:]]+(.*)$" ]]; then
        c_desc=${match[1]}
      else
        continue
      fi
    else
      continue
    fi

    [ -n "$c_scm" ] && c_desc="(${c_scm}) ${c_desc}"

    c_opt="--${c_name}[${c_desc}]"

    if [[ $has_parameter = 1 ]]; then
      c_opt="${c_opt}:${c_name}"
      case ${c_name} in
        browser)    c_opt="${c_opt}:_ccollab_browsers" ;;
        scm)        c_opt="${c_opt}:_ccollab_scm_types" ;;
        *)          c_opt="${c_opt}: " ;;
      esac
    fi

    _ccollab_global_options_list+=("${c_opt}")
  done
}

# The list of commands is cached in _ccollab_cmd_list, but we only generate it
# via this function when we need it.
(( $+functions[_ccollab_gen_cmd_list] )) ||
_ccollab_gen_cmd_list() {
  (( ${+_ccollab_cmd_list} )) || typeset -ga _ccollab_cmd_list
  local hline line match mbegin mend
  # Output looks like <space>command-name<space>description in words... Ignore
  # blank lines and the heading line beginning 'ccollab...' Just gets run once,
  # then cached, so do not bother optimising this to a grossly unreadable
  # parameter substitution.
  _ccollab_call_ccollab help-commands help --show-all 2>&1 | while read -A hline; do
    (( ${#hline} < 2 )) && continue
#   [[ $hline[1] = (#i)ccollab ]] && continue
#   [[ $hline[2] = (#i)\'ccollab ]] && continue
    [[ $hline[2] =~ [[:upper:]] ]] || continue
    _ccollab_cmd_list+=("${hline[1]}:${hline[2,-1]}")
  done
  # Also cache the server version for nefarious purposes.
  _ccollab_call_ccollab version --version | while read -A line; do
    _ccollab_version=$line[2]
  done
}

(( $+functions[_ccollab_gen_admin_cmd_list] )) ||
_ccollab_gen_admin_cmd_list() {
  (( ${+ccollab_admin_cmd_list} )) || typeset -ga _ccollab_cmd_list
  _ccollab_call_ccollab help-admin help admin 2>&1 | while read -A hline; do
    (( ${#hline} < 2 )) && continue
    [[ $hline[2] =~ [[:upper:]] ]] || continue
    _ccollab_admin_cmd_list+=("${hline[1]}:${hline[2,-1]}")
  done
}

(( $+functions[_ccollab_commands] )) ||
_ccollab_commands() {
  (( ${#_ccollab_cmd_list} )) || _ccollab_gen_cmd_list
  _describe -t ccollab-commands 'ccollab command' _ccollab_cmd_list
}

(( $+functions[_ccollab_command_args] )) ||
_ccollab_command_args() {
  local curcontext="$curcontext" cmd=${words[1]}
  if (( $+functions[_ccollab_cmd_$cmd] )); then
    curcontext="${curcontext%:*:*}:ccollab-${cmd}:"
    _ccollab_cmd_$cmd
  else
    _message "unhandled ccollab command: $cmd"
  fi
}

(( $+functions[_ccollab_service_dispatch] )) ||
_ccollab_service_dispatch() {
  # Put the original command name back, then dispatch for our ccollab handler.
  words=($1 "$words[@]")
  (( CURRENT++ ))
  _ccollab_cmd_$2
}

# Helper functions

(( $+functions[_ccollab_global_options] )) ||
_ccollab_global_options() {
  _ccollab_gen_global_options_list

  # Options with arguments we need to pass down when calling ccollab from
  # completers. There are no options without arguments we need to pass. (Do not
  # pass down -L language since we parse based on English output.)
  local argopts_pass=""
  # Other options which have arguments but we should not pass down.
  # There are some debugging options, but they tend to get used
  # with the argument in the same word as the option, in which
  # case they will be handled OK anyway.
  local argopts_ignore=""

  # The options we support in the form for _arguments.
  # This is here for modularity and convenience, but note that since the
  # actual dispatch takes place later, this is not local to this
  # function and so must be made local in the caller.

  _ccollab_option_dispatch_a=($_ccollab_global_options_list)

  integer i

  # We need to try and check if we are before or after the subcommand, since
  # some of the options with arguments, in particular -c, work differently. It
  # did not work if I just added '*::...' to the end of the arguments list,
  # anyway.
  for (( i = 2; i < CURRENT; i++ )); do
    if [ -n "$argopts_pass" -o -n "$argopts_ignore" ]; then
      if [[ $words[i] = -[$argopts_pass$argopts_ignore] ]]; then
        # word with following argument --- check this
        # is less than the current word, else we are completing
        # this and should not pass it down
        if [[ $(( i + 1 )) -lt $CURRENT && $words[i] = -[$argopts_pass] ]]; then
          _ccollab_global_options_a+=(${words[i,i+1]})
        fi
        (( i++ ))
      elif [[ $words[i] = -[$argopts_pass]* ]]; then
        # word including argument which we want to keep
        _ccollab_global_options_a+=(${words[i]})
      elif [[ $words[i] != -* ]]; then
        break
      fi
    elif [[ $(( i + 1 )) -lt $CURRENT && $words[i] = -* ]]; then
      _ccollab_global_options_a+=(${words[i,i+1]})
      (( i++ ))
    elif [[ $words[i] = -* ]]; then
      _ccollab_global_options_a+=(${words[i]})
    elif [[ $words[i] != -* ]]; then
      break
    fi
  done
# set +x

  (( _ccollab_cmd_ind = i ))
  (( _ccollab_cmd_ind >= CURRENT ))
}

(( $+functions[_ccollab_branches] )) ||
_ccollab_branches() {
  local bline match mbegin mend
  local -a bl
  bl=(${${${(f)"$(_ccollab_call_ccollab branches branches 2>/dev/null)"}##Branch }/ /:})
  [[ $#bl -eq 1 && $bl[1] = '' ]] && bl=()
  (( $#bl )) && _describe -t branches 'ccollab branch' bl
}

_ccollab_no_more_args() {
  _arguments -s :
}

(( $+functions[_ccollab_diffs_args] )) ||
_ccollab_diffs_args() {
  _arguments -s : \
    '--upload-comment[Upload file comment]:comment: ' \
    ':review:_ccollab_action_items' \
    '*:user diff arg: ' "$@"
}

(( $+functions[_ccollab_action_items] )) ||
_ccollab_action_items() {
  local line match comma
  local -a items args default_items

  items=()
  default_items=()

  _ccollab_call_ccollab action-items actionitems | while read line; do
    [[ $line =~ "^Connecting to Code Collaborator Server" ]] && continue
    [[ $line =~ "^Connected as:" ]] && continue
    [[ $line =~ '^[[:digit:]]+ action items for' ]] && continue
    [[ $line =~ 'Review #([[:digit:]]+): (.*)$' ]] && items+=($match[1]:$match[2])
  done

  # Hack: assume the arguments we want are at the end.
  while [[ $argv[-1] = -a? ]]; do
    case $argv[-1] in
      (-an) default_items+=("new:create a new review") ;;
      (-aa) default_items+=("ask:ask for review") ;;
      (-al) default_items+=("last:last used review") ;;
    esac
    argv=($argv[1,-2])
  done

  if [[ $#default_items = 0 ]]; then
    default_items+=("new:create a new review")
    default_items+=("ask:ask for review")
    default_items+=("last:last used review")
  fi

  items+=($default_items)

  [[ $#items -eq 1 && $items[1] = '' ]] && items=()
  _describe -t changes "review" items -V reviews-unsorted $comma
}

(( $+functions[_ccollab_browsers] )) ||
_ccollab_browsers() {
  local expl
  _wanted browser expl 'browser' \
    compadd Default FireFox "GNOME open" "KDE open" "XDG open"
}

(( $+functions[_ccollab_scm_types] )) ||
_ccollab_scm_types() {
  local -a scml
  scml=("accurev:AccuRev" "clearcase:ClearCase" "cvs:CVS" "mks:MKS" \
    "p4:Perforce" "synergy:Rational Synergy" "rtc:Rational Team Concert" \
    "starteam:StarTeam" "svn:Subversion" "surround:Surround SCM" \
    "tfs:Team Foundation Server" "vault:Vault" "vss:VisualSourceSafe")
  _describe -t scm 'SCM type' scml
}

(( $+functions[_ccollab_option_keys] )) ||
_ccollab_option_keys() {
  (( ${+_ccollab_option_key_list} )) || typeset -gA _ccollab_option_key_list
  (( ${+_ccollab_option_key_args} )) || typeset -gA _ccollab_option_key_args
  (( ${#_ccollab_option_key_list} )) && return

  local name desc action

  _ccollab_option_key_list=()
  _ccollab_option_key_args=()

  for key in "${_ccollab_global_options_list[@]}"; do
    action=

    if [[ $key =~ "--(.*)\[(.*)\]" ]]; then
      name=$match[1]
      desc=$match[2]
    fi

    [[ $key =~ ":.*:(.*)" ]] && action=$match[1]

    desc="${name}:${desc}"

    [[ -z "${action}" ]] && action="(true false)"

    _ccollab_option_key_list+=(${name} "${desc}")
    _ccollab_option_key_args+=(${name} "${action}")
  done
}

# Completions for ccollab commands

(( $+functions[_ccollab_cmd_actionitems] )) ||
_ccollab_cmd_actionitems() {
  # No arguments
  _ccollab_no_more_args
}

(( $+functions[_ccollab_cmd_addactivity] )) ||
_ccollab_cmd_addactivity() {
  _arguments -s : \
    '--diffintegration[Predecessor is latest version]' \
    '--upload-comment[Upload file comment]:comment: ' \
    ':review:_ccollab_action_items' \
    '*:activity name: '
}

(( $+functions[_ccollab_cmd_addardiffs] )) ||
_ccollab_cmd_addardiffs() {
  _ccollab_diffs_args
}

(( $+functions[_ccollab_cmd_addchangelist] )) ||
_ccollab_cmd_addchangelist() {
  _arguments -s : \
    ':review:_ccollab_action_items' \
    '*:changelist: '
}

(( $+functions[_ccollab_cmd_addchanges] )) ||
_ccollab_cmd_addchanges() {
  _arguments -s : \
    '--diffbranch[ClearCase branch name]:earlier version: ' \
    '--upload-comment[Upload file comment]:comment: ' \
    ':review:_ccollab_action_items' \
    '*:file spec: '
}

(( $+functions[_ccollab_cmd_addcvsdiffs] )) ||
_ccollab_cmd_addcvsdiffs() {
  _ccollab_diffs_args
}

(( $+functions[_ccollab_cmd_adddiffs] )) ||
_ccollab_cmd_adddiffs() {
  _arguments -s : \
    '--relative[Upload paths as relative]' \
    '--upload-comment[Upload file comment]:comment: ' \
    ':review:_ccollab_action_items' \
    ':patch file or before path (if after is given): ' \
    '::after path: '
}

(( $+functions[_ccollab_cmd_addfiles] )) ||
_ccollab_cmd_addfiles() {
  _arguments -s : \
    '--relative-to[File paths are relative to this path]:absolute parent path: ' \
    '--upload-comment[Upload file comment]:comment: ' \
    ':review:_ccollab_action_items' \
    '*:upload file path: '
}

(( $+functions[_ccollab_cmd_addgitdiffs] )) ||
_ccollab_cmd_addgitdiffs() {
  _ccollab_diffs_args
}

(( $+functions[_ccollab_cmd_addhgdiffs] )) ||
_ccollab_cmd_addhgdiffs() {
  _ccollab_diffs_args
}

(( $+functions[_ccollab_cmd_addp4diffs] )) ||
_ccollab_cmd_addp4diffs() {
  _ccollab_diffs_args
}

(( $+functions[_ccollab_cmd_addp4job] )) ||
_ccollab_cmd_addp4job() {
  _arguments -s : \
    ':review:_ccollab_action_items' \
    ':Perforce job name: '
}

(( $+functions[_ccollab_cmd_addstdiffs] )) ||
_ccollab_cmd_addstdiffs() {
  _ccollab_diffs_args
}

(( $+functions[_ccollab_cmd_addstream] )) ||
_ccollab_cmd_addstream() {
  _arguments -s : \
    '--upload-comment[Upload file comment]:comment: ' \
    ':review:_ccollab_action_items' \
    ':Perforce job name: '
}

(( $+functions[_ccollab_cmd_addsvndiffs] )) ||
_ccollab_cmd_addsvndiffs() {
  _ccollab_diffs_args
}

(( $+functions[_ccollab_cmd_addtrack] )) ||
_ccollab_cmd_addtrack() {
  _arguments -s : \
    '--upload-comment[Upload file comment]:comment: ' \
    ':review:_ccollab_action_items' \
    ':defect name: ' \
    ':release name: ' \
    '::root path: '
}

(( $+functions[_ccollab_cmd_addurls] )) ||
_ccollab_cmd_addurls() {
  _arguments -s : \
    '--upload-comment[Upload file comment]:comment: ' \
    ':review:_ccollab_action_items' \
    '*:url: '
}

(( $+functions[_ccollab_cmd_addversions] )) ||
_ccollab_cmd_addversions() {
  _arguments -s : \
    '--upload-comment[Upload file comment]:comment: ' \
    ':review:_ccollab_action_items' \
    '*:version spec: '
}

(( $+functions[_ccollab_cmd_addvssdiffs] )) ||
_ccollab_cmd_addvssdiffs() {
  _ccollab_diffs_args
}

(( $+functions[_ccollab_cmd_admin] )) ||
_ccollab_cmd_admin() {
  if (( CURRENT == 2 )); then
    local -a adcmds
    adcmds=(
      "checkpoint:checkpoint, save copy of journal file"
      "journal:save and truncate journal file"
      "stop:stop the server")
    _describe -t commands 'ccollab admin command' adcmds
  elif [[ $words[2] == (checkpoint|journal) ]]; then
    shift words
    (( CURRENT-- ))
    _arguments -s : \
      '-z[gzip journal file]' \
      '1::journal file prefix: '
  fi
}

(( $+functions[_ccollab_cmd_browse] )) ||
_ccollab_cmd_browse() {
  _arguments -s : \
    '--review[review]:review:_ccollab_action_items -aa -al'
}

(( $+functions[_ccollab_cmd_commit] )) ||
_ccollab_cmd_commit() {
  _arguments -s : \
    '--comment[Reviewed changes comment]:comment: ' \
    '--dismiss-only[Dismiss the action item]' \
    '--force[Ignore potential problems]' \
    ':review:_ccollab_action_items -aa -al'
}

(( $+functions[_ccollab_cmd_info] )) ||
_ccollab_cmd_info() {
  # No arguments
  _ccollab_no_more_args
}

(( $+functions[_ccollab_cmd_login] )) ||
_ccollab_cmd_login() {
  _arguments -s : \
    '::URL to server: ' \
    '::username: ' \
    '::password: ' \
    '::Proxy server URL: ' \
    '::Proxy port: '
}

(( $+functions[_ccollab_cmd_help] )) ||
_ccollab_cmd_help() {
  if (( CURRENT == 2 )); then
    local hline
    if (( ! ${#_ccollab_help_list} )); then
      (( ${+_ccollab_help_list} )) || typeset -ga _ccollab_help_list
      # All commands have help.
      (( ${#_ccollab_cmd_list} )) || _ccollab_gen_cmd_list
      _ccollab_help_list=($_ccollab_cmd_list)
      _ccollab_call_ccollab help help --show-all 2>&1 | while read -A hline; do
        if [[ $hline[1] = ccollab && $hline[2] = help ]]; then
          _ccollab_help_list+=("$hline[3]:${hline[4,-1]}")
        fi
      done
    fi

    _describe -t help-options 'ccollab help option' _ccollab_help_list
  elif (( CURRENT == 3 )); then
    if [[ "${words[$CURRENT - 1]}" = "admin" ]]; then
      (( ${+_ccollab_help_admin_list} )) || typeset -ga _ccollab_help_admin_list
      (( ${#_ccollab_admin_cmd_list} )) || _ccollab_gen_admin_cmd_list
      _ccollab_help_admin_list=($_ccollab_admin_cmd_list)
      _ccollab_help_admin_list+=("batch-xml:Extract the batch mode XML schema")
      _describe -t help-options 'ccollab admin help option' _ccollab_help_admin_list
    else
      _ccollab_no_more_args
    fi
  elif (( CURRENT == 4 )); then
    case "${words[$CURRENT - 1]}" in
      config)       : ;; # config > custom-field > edit
      review)       : ;; # review > multiple sub-commands
      user)         : ;; # user > multiple sub-commands
      trigger)      : ;; # trigger > multiple sub-commands
      group)        : ;; # group > multiple sub-commands
      changelist)   : ;; # changelist > update-id
    esac
  else
    _ccollab_no_more_args
  fi
}

(( $+functions[_ccollab_cmd_set] )) ||
_ccollab_cmd_set() {
  _ccollab_option_keys

  if (( CURRENT == 2 )); then
    typeset -a keylist
    keylist=("${_ccolab_option_key_list[@]}")
    _describe -t ccollab-option-keys 'Option' _ccollab_option_key_list
  elif (( CURRENT == 3 )); then
    key=${words[$CURRENT - 1]}
    action="${_ccollab_option_key_args[$key]}"
    _arguments -s : "*:${key}:${action}"
  else
    _ccollab_no_more_args
  fi
}

_ccollab "$@"
