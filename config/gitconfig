[advice]
  statusHints = false

[alias]
  addp = add -p
  back = checkout "-"
  cherry-continue = !git add -u . && git cherry-pick --continue
  clean-remote = "!for d in $(git merged-remote); do git push origin :$d; done"
  co = checkout
  count = shortlog -s -n
  current-branch = !git symbolic-ref HEAD 2> /dev/null | sed -e 's!refs/heads/!!'
  fast-amend = commit --amend --no-edit
  git = !git
  hist = log --pretty =format:\"%C(yellow)%h%C(reset) %C(green)%ad%C(reset) %C(red)|%C(reset) %s %C(bold blue)[%an]%C(reset)%C(yellow)%d%C(reset)\" --graph --date =short
  history = log -10 --format =format:'%C(green)%h %C(reset)â€¢ %s (%cN, %ar)'
  ignored = ls-files --others -i --exclude-standard
  last = log -1 HEAD --format =format:"%Cred%H"
  ll = log --pretty =oneline --abbrev-commit --max-count =15
  llf = fsck --lost-found
  logg = log --graph --all --decorate
  logt = log --date-order --graph --tags --simplify-by-decoration --pretty =format:'%ai %h %C(Yellow)%d%C(reset)'
  pull-rebase = pull --rebase
  push-head = !git push origin $(git symbolic-ref HEAD)
  rank = shortlog -sn --no-merges
  rebase-abort = rebase --abort
  rebase-continue = !git add -u . && git rebase --continue
  rebase-original = "!git show $(cat .git/rebase-apply/original-commit)"
  rebase-skip = rebase --skip
  review = merge --no-ff --no-commit
  sl = stash list --name-status --pretty ='format:%gd [%ar]: %s'
  st = status -sb -uno --ignore-submodules =untracked
  staged = diff --cached
  standup = shortlog --since =yesterday
  stc = diff --stat --name-status --cached
  top = !eval cd "$(pwd)/$(git rev-parse --show-cdup)" && pwd
  update-rebase = !git fetch -mp && git pull --rebase
  vgc = repack -f -a -d --depth =250 --window =250

% on in_path?('fzf') do
  fzflog = "!git log --color =always --format =\"%C(auto)%h%d %s %C(black)%C(bold)%cr\" \"${@}\" | fzf --ansi| awk '{print $1}' | pbcopy"
% end
% on in_path?('icdiff') do
  showtool = "!f() { git difftool --tool icdiff ${1:-HEAD}^ ${1:-HEAD}; }; f"
% end

% on in_path?('hub') do
  browse = !hub browse
  compare = !hub compare
% end

  # conflicts = !git-conflicts
  # cut-branch = !git-cut-branch
  # sh = !git-sh
  # grab = !git-grab
  # thanks = !git-thanks
  # track = !git-track
  # remove-submodule = !git-remove-submodule
  # incoming = !git-incoming
  # outgoing = !git-outgoing

[apply]
  whitespace = nowarn

[branch]
  autosetuprebase = always

[color]
  branch = auto
  diff = auto
  pager = true
  status = auto
  ui = auto

[color "diff"]
  meta = blue bold
  frag = magenta bold
  old = red bold
  new = green bold
  diff = always

[color "branch"]
  current = yellow reverse
  local = yellow bold
  remote = green bold
  plain = red bold

[color "status"]
  added = green
  changed = yellow bold
  untracked = white bold

[commit]
% on path_exist?(home('.git_commit_template')) do
  template = <%= home %>/.git_commit_template
% end
  ; gpgSign = true

[core]
  autocrlf = input
  compression = -1
  editor = vim
  excludesfile = <%= home %>/.gitignore
% on in_path?('delta') do
  pager = delta
% end
% on !in_path?('delta') do
  pager = less -+$LESS -FRSX
% end
  precomposeunicode = true
  safecrlf = true
  whitespace = trailing-space,tab-in-indent,cr-at-eol,space-before-tab

[diff]
  compactionHeuristic = true
  mnemonicprefix = true
  renames = copies
  submodule = log

[diff "ruby"]
  funcname = ^ *\\(\\(class\\|module\\|def\\) .*\\)

[diff "elixir"]
  funcname = ^ *\\(\\(defmodule\\|defimpl\\|defprotocol\\|def\\) .*\\)

[difftool]
  prompt = false

% on in_path?('icdiff') do
[difftool "icdiff"]
  cmd = icdiff --line-numbers "${LOCAL}" "${REMOTE}"
% end

% on in_path?('delta') do
[difftool "delta"]
  cmd = delta \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
% end

[fetch]
  recurseSubmodules = on-demand

% on in_path?('git-lfs') do
[filter "lfs"]
  process = git-lfs filter-process
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
% end

[format]
  pretty = %C(yellow)%h%C(reset) %C(red)%ad%C(reset) | %s%d %C(green)[%aN]%C(reset)

[gc]
  reflogexpire = 300
  reflogexpireunreachable = 90

% on user_data_lookup 'github.user' do
[github]
  user = <%= user_data_lookup 'github.user' %>
% end

% on in_path?('git-repo') do
%   on user_data_lookup('bitbucket.user') do
[gitrepo "bitbucket"]
  token = <%= user_data_lookup 'bitbucket.user' %>:<%= user_data_lookup 'bitbucket.password' %>
%   end
%   on user_data_lookup('github.oauth_token') do
[gitrepo "github"]
  token = <%= user_data_lookup 'github.oauth_token' %>
%   end
% end

[grep]
  extendRegexp = true
  lineNumber = true

% on path_exist?(home('.git_template')) do
[init]
  templatedir = <%= home %>/.git_template
% end

[log]
  date = short
  decorate = auto
  showSignature = false

[merge]
  tool = gvimdiff
  log = true
  conflictstyle = diff3

[mergetool "gvimdiff"]
  cmd = gvim -d --remote-wait-silent "${LOCAL}" "${MERGED}" "${REMOTE}"
  trustExitCode = true

[mergetool "vimdiff"]
  cmd = vim -d "${LOCAL}" "${MERGED}" "${REMOTE}"
  trustExitCode = true

[pack]
  threads = 0

[pager]
  difftool = true

[pull]
  ff = only

[push]
  default = simple
  followtags = true

[rebase]
  autostash = true
  autosquash = true

[stash]
  showpatch = true

[status]
  showuntrackedfiles = all
  submoduleSummary = true

[submodule]
  fetchJobs = 4

[tag]
  forceSignAnnotated = true

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
[url "git@gist.github.com:"]
  insteadOf = "gist:"
[url "git@bitbucket.org:"]
  insteadOf = "bb:"

[user]
  useconfigonly = true
  name = <%= user_data_lookup 'name' %>
  email = <%= user_data_lookup 'email' %>

<%= include_platform_files %>
<%= include_user_files %>

# vim: ft=gitconfig syntax=gitconfig
