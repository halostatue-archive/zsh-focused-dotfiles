[user]
  useconfigonly = true
  name = <%= user_data_lookup 'name' %>
  email = <%= user_data_lookup 'email' %>

% on path_exist?(home('.git_template')) do
[init]
  templatedir = <%= home %>/.git_template
% end

[difftool]
  prompt = false

[diff]
  mnemonicprefix = true
  compactionHeuristic = true
  renames = copies

[diff "ruby"]
  funcname = ^ *\\(\\(class\\|module\\|def\\) .*\\)

[branch]
  autosetuprebase = always

[rebase]
  autostash = true
  autosquash = true

[core]
  excludesfile = <%= home %>/.gitignore
  pager = less -+$LESS -FRSX
  whitespace=trailing-space,tab-in-indent,cr-at-eol,space-before-tab
  autocrlf = input
  safecrlf = true

[merge]
  tool = gvimdiff
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  conflictstyle = diff3

[mergetool "gvimdiff"]
  cmd = gvim -d --remote-wait-silent "${LOCAL}" "${MERGED}" "${REMOTE}"
  trustExitCode = true

[mergetool "vimdiff"]
  cmd = vim -d "${LOCAL}" "${MERGED}" "${REMOTE}"
  trustExitCode = true

% on in_path?('icdiff') do
[diff]
  tool = icdiff

[difftool "icdiff"]
  cmd = icdiff --line-numbers "${LOCAL}" "${REMOTE}"

[alias]
  showtool = "!f() { git difftool --tool icdiff ${1:-HEAD}^ ${1:-HEAD}; }; f"
  added = difftool --cached
% end

[pager]
  difftool = true

[format]
  pretty = %C(yellow)%h%C(reset) %C(red)%ad%C(reset) | %s%d %C(green)[%aN]%C(reset)

[stash]
  showpatch = true

[log]
  date = short
  decorate = auto

[pull]
  ff = only

[alias]
  # Smooth out the git-cli surface
  branches = branch -a
  remotes  = remote -v
  stashes  = stash list
  sl = stash list --name-status --pretty='format:%gd [%ar]: %s'
  tags     = tag -l
  prune = fetch --prune
  prev = checkout HEAD^
  rank = shortlog -sn --no-merges

  nevermind  = !git reset --hard HEAD && git clean -fd
  hardreset  = reset --hard HEAD
  discard    = checkout --
  unstage    = reset -q HEAD --
  unamend    = reset --soft HEAD@{1}
  uncommit   = reset --soft HEAD~
  undo = reset --soft HEAD^
  fast-amend = commit --amend --no-edit
  amend      = !git-amend

  save   = commit -m
  resave = commit --amend
  invert = revert

  precommit = diff --cached -w --word-diff=color --word-diff-regex='[^[:space:]<>]+'
  prestage = diff -w --word-diff=color
  unmerged  = diff --name-only --diff-filter=U

  move = mv
  remove = rm

  unmerged-branches = branch --no-merged
  unstash = stash pop
  stash-all = stash save --include-untracked

  what = show -w
  untrack = rm -r --cached
  rewrite = rebase -i

  back = checkout "-"

  contributors = shortlog -s -n
  filetrail = log --follow -p -w
  mergetrail = log --ancestry-path --merges

  # Simple functionality extension
  addp      = add -p
  cat       = -p cat-file -p
  changelog = log --pretty=format:\" * %s\"
  changes   = log --pretty=format:\"%h %cr %cn %C(green)%s%C(reset)\" --name-status
  glog      = log --graph --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cr) %C(bold blue){%an}%C(reset)'
  co        = checkout
  dump      = cat-file -p
  filelog   = log -u
  findnext  = rev-list --reverse -n1 HEAD..master
  go        = checkout -b
  branchout = checkout -b
  hist      = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short
  hist2     = for-each-ref --count=5 --sort=-committerdate --format='%(refname:short)' refs/heads/
  hist3     = log --pretty=format:\"%C(yellow)%h%C(reset) %C(green)%ad%C(reset) %C(red)|%C(reset) %s %C(bold blue)[%an]%C(reset)%C(yellow)%d%C(reset)\" --graph --date=short
  ignored   = ls-files --others -i --exclude-standard
  lastd     = diff HEAD^
  last      = log -1 HEAD --format=format:"%Cred%H"
  fpush     = push --force-with-lease

  history      = log -10 --format=format:'%C(green)%h %C(reset)• %s (%cN, %ar)'
  graph        = log --graph -10 --branches --remotes --tags  --format=format:'%C(green)%h %C(reset)• %<(75,trunc)%s (%cN, %cr) %C(red)%d' --date-order
  ld           = log --topo-order --stat --patch --full-diff --pretty=format:'%C(bold)%C(yellow)Commit:%C(reset) %C(yellow)%H%C(red)%d%n%C(bold)%C(yellow)Author:%C(reset) %C(cyan)%an <%= "<%ae>" %>%n%C(bold)%C(yellow)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%+B'
  lg           = log --graph --pretty=format:'%C(red)%h%C(reset) -%C(yellow)%d%C(reset) %s %C(green)(%cd)%C(reset)' --abbrev-commit --date=short
  lga          = log --topo-order --all --graph --pretty=format:'%C(yellow)%h %C(cyan)%cn%C(reset) %s %C(red)%d%C(reset)%n'
  lgs          = log --topo-order --all --graph --pretty=format:'%C(yellow)%h%C(reset) %s %C(red)%d%C(reset)%n'
  lg2          = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen%cn%Creset %Cblue(%cr)%Creset' --abbrev-commit --date=relative
  lg3            = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue){%an}%Creset' --abbrev-commit
  lg4 = log --date=short --pretty='%cd %h%d %s'
  leg = log --date=short --pretty='%cd %h%d %cE: %s'
  ll           = log --pretty=oneline --abbrev-commit --max-count=15
  llf          = fsck --lost-found
  lm           = log --topo-order --pretty=format:'%s'
  logg         = log --graph --all --decorate
  logo         = log --oneline --graph --all --decorate
  tree = log --oneline --decorate --graph
  news = log -p @{1}..
  logt         = log --date-order --graph --tags --simplify-by-decoration --pretty=format:'%ai %h %C(Yellow)%d%C(reset)'
  longline     = log --abbrev-commit --graph --pretty=format:'%C(yellow bold)%h%C(reset) by %C(red)%an%C(reset) (%ar)%C(cyan bold)%d%C(reset)%n%s%n%b' --all
  ls           = log --topo-order --stat --pretty=format:'%C(bold)%C(yellow)Commit:%C(reset) %C(yellow)%H%C(red)%d%n%C(bold)%C(yellow)Author:%C(reset) %C(cyan)%an <%= "%ae" %>%n%C(bold)%C(yellow)Date:%C(reset)   %C(blue)%ai (%ar)%C(reset)%n%+B'
  lt           = log --topo-order --pretty=format:'%C(yellow)%h %C(cyan)%cn %C(blue)%cr%C(reset) %s'
  pull-rebase  = pull --rebase
  rclone       = clone --reference /git/cache.git/
  rebase-abort = rebase --abort
  rebase-skip  = rebase --skip
  review       = merge --no-ff --no-commit
  sa           = status -sb --ignore-submodules=untracked
  short        = log --pretty=format:\"%h %cr %cn %C(green)%s%C(reset)\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
  sm           = status -sb -uno --ignore-submodules=untracked
  staged       = diff --cached
  standup      = shortlog --since=yesterday
  stc          = diff --stat --name-status --cached
  d = diff -c HEAD
  dd = diff -c HEAD --name-status
  st = status -s uno
  summary      = status -u -s
  subdo        = submodule foreach git
  subs         = submodule foreach git pul origin master
  today        = shortlog --since=midnight
  type         = cat-file -t
  vgc          = repack -f -a -d --depth=250 --window=250
  who          = shortlog -s -n --no-merges
  latest       = for-each-ref --count=30 --sort=-committerdate refs/heads/ --format='%(refname:short)'
% on in_path?('diff-so-fancy') do
  dsf          = "!f() { [ \"$GIT_PREFIX\" != \"\" ] && cd "$GIT_PREFIX"; git diff --color $@ | diff-so-fancy | less --tabs=4 -RFX; }; f"
  ssf          = "!f() { [ \"$GIT_PREFIX\" != \"\" ] && cd "$GIT_PREFIX"; git show --color $@ | diff-so-fancy | less --tabs=4 -RFX; }; f"
% end
% on in_path?('git-wtf') do
  clean-local   = "!for d in $(git merged-local); do git branch -d $d; done"
  merged-local  = "!git wtf -s -r | awk '/^\\(x\\)/ { print $2; }'"
  merged-remote = "!git wtf -s -r | awk '/^\\{x\\}/ { print $2; }'"
% end
% on in_path?('fzf') do
  fzflog = "!git log --color=always --format=\"%C(auto)%h%d %s %C(black)%C(bold)%cr\" \"${@}\" | fzf --ansi| awk '{print $1}' | pbcopy"
% end

  # More complex functionality
  add-unmerged     = !git add $(git ls-files --unmerged | cut -f2 | sort -u)
  checkoutnext     = !git checkout $(git findnext)
  cherry-continue  = !git add -u . && git cherry-pick --continue
  credit           = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
  current-branch   = !git symbolic-ref HEAD 2> /dev/null | sed -e 's!refs/heads/!!'
  datetag          = !git tag $(date '+%Y%m%d%H%M')-1
  debug            = !GIT_PAGER= gdb --args git
  edit-last-commit = !$EDITOR $(git diff-tree -r --name-only 'HEAD' 'HEAD~1')
  edit-unmerged    = !$EDITOR $(git ls-files --unmerged | cut -f2 | sort -u)
  file-blame       = !git ls-files | xargs -n1 -I{} git log -1 --pretty=format:'%ci {}' -- {}
  gvc              = "!f() { EDITOR=\"gvim --servername git --remote-wait-silent\" git commit ${@}; }; f"
  rebase-continue  = !git add -u . && git rebase --continue
  pr               = !git-new-pull-request
  push-head        = !git push origin $(git symbolic-ref HEAD)
  pushall          = !git remote | xargs -n1 git push
  pushalltags      = !git remote | xargs -n1 git push --tags
  subup            = !git submodule foreach git checkout master && git submodule foreach git pull
  top              = !eval cd "$(pwd)/$(git rev-parse --show-cdup)" && pwd
  update-rebase    = !git fetch -mp && git pull-rebase
  rebase-original  = "!git show $(cat .git/rebase-apply/original-commit)"
  git              = !git
# clean-remote      = "!for d in $(git merged-remote); do git push origin :$d; done"

  # Not sure I'm going to use these.
# # Show the diff between the latest commit and the current state
# d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
# # `git di $number` shows the diff between the state `$number` revisions ago and the current state
# di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
# # Pull in remote changes for the current repository and all its submodules
# p = !"git pull; git submodule foreach git pull origin master"
# # Clone a repository including all submodules
# c = clone --recursive
# # Commit all changes
# ca = !git add -A && git commit -av
# # Show verbose output about tags, branches or remotes
# # Interactive rebase with the given number of latest commits
# reb = "!r() { git rebase -i HEAD~$1; }; r"
# # Undo a `git push`
# undopush = push -f origin HEAD^:master

  # Aliases to allow for the completion of helper functions
  browse           = !hub browse
  compare          = !hub compare
  conflicts        = !git-conflicts
  cut-branch       = !git-cut-branch
  sh               = !git-sh
  grab             = !git-grab
  thanks           = !git-thanks
  track            = !git-track
  remove-submodule = !git-remove-submodule
  incoming         = !git-incoming
  outgoing         = !git-outgoing

% on in_path?('git-repo') && user_data_lookup('bitbucket.user') do
  bb = repo bb
% end
% on in_path?('git-repo') && user_data_lookup('github.oauth_token') do
  hub = repo hub
% end

[advice]
  statusHints = false

[color]
  pager = true
  ui = auto

[color "diff"]
  meta = blue bold
  frag = magenta bold
  old = red bold
  new = green bold
  diff = always

[color "branch"]
  current = yellow reverse
  local = yellow bold
  remote = green bold
  plain = red bold

[color "status"]
  added = green
  changed = yellow bold
  untracked = white bold

[pack]
  threads = 0

[gc]
  reflogexpire = 300
  reflogexpireunreachable = 90

% on user_data_lookup 'github.user' do
[github]
  user = <%= user_data_lookup 'github.user' %>
% end

[push]
  default = simple
  followtags = true

[status]
  showuntrackedfiles = all

% on in_path?('git-repo') do
%   on user_data_lookup('bitbucket.user') do
[gitrepo "bitbucket"]
  token = <%= user_data_lookup 'bitbucket.user' %>:<%= user_data_lookup 'bitbucket.password' %>
%   end
%   on user_data_lookup('github.oauth_token') do
[gitrepo "github"]
  token = <%= user_data_lookup 'github.oauth_token' %>
%   end
% end

% on in_path?('git-lfs') do
[filter "lfs"]
  process = git-lfs filter-process
  required = true
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
% end

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
[url "git@gist.github.com:"]
  insteadOf = "gist:"
[url "git@bitbucket.org:"]
  insteadOf = "bb:"

% on in_path?('delta') do
[difftool "delta"]
  cmd = delta \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
% end

% on in_path?('krgpg') do |path|
[gpg]
  program = <%= path %>
[commit]
	gpgSign = true
[tag]
	forceSignAnnotated = true
% end


<%= include_platform_files %>
<%= include_user_files %>

# vim: ft=gitconfig syntax=gitconfig
