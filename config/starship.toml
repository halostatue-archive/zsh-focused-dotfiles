# Don't print a new line at the start of the prompt
# add_newline = false # default true

# Timeout for starship to scan files (in milliseconds).
# scan_timeout = 30 # default 30

# Configure the order in which the prompt module occurs.
# prompt_order= """\
#     $username\
#     $hostname\
#     $shlvl\
#     $kubernetes\
#     $directory\
#     $git_branch\
#     $git_commit\
#     $git_state\
#     $git_status\
#     $hg_branch\
#     $docker_context\
#     $package\
#     $cmake\
#     $dart\
#     $dotnet\
#     $elixir\
#     $elm\
#     $erlang\
#     $golang\
#     $helm\
#     $java\
#     $julia\
#     $nim\
#     $nodejs\
#     $ocaml\
#     $php\
#     $purescript\
#     $python\
#     $ruby\
#     $rust\
#     $terraform\
#     $zig\
#     $nix_shell\
#     $conda\
#     $memory_usage\
#     $aws\
#     $gcloud\
#     $env_var\
#     $crystal\
#     $cmd_duration\
#     $custom\
#     $line_break\
#     $jobs\
#     $battery\
#     $time\
#     $status\
#     $character"""

# [prefix]      [symbol]     [version]    [suffix]
#  "via "         "⬢"        "v10.4.1"       ""

[aws]
format = '[$symbol$profile(\($region\))]($style) '

[battery]
disabled = true

[character]      # The name of the module we are configuring is "character"
error_symbol = "[✖](bold red)"

[cmake]
format = '[$symbol$version]($style) '

[cmd_duration]

[conda]

[crystal]
format = '[$symbol$version]($style) '

[custom]

[dart]
format = '[$symbol$version]($style) '

[directory]

[docker_context]
only_with_files = true
format = '[$symbol$context]($style) '

[dotnet]
format = '[$symbol$version]($style) '

[elixir]
format = '[$symbol$version \(OTP $otp_version\)]($style) '

[elm]
format = '[$symbol$version]($style) '

[env_var]

[erlang]
format = '[$symbol$version]($style) '

[gcloud]
format = '[$symbol$account(\($region\))]($style) '

[git_branch]
# format = '[$symbol$branch]($style) '

[git_commit]
commit_hash_length = 9
# format = '[\($hash\)]($style) '

[git_state]
# format = '\([$state( $progress_current/$progress_total)]($style)\) '

[git_status]
# ahead = "⇡${count}"
# diverged = "⇕⇡${ahead_count}⇣${behind_count}"
# behind = "⇣${count}"
# format = '([\[$all_status$ahead_behind\]]($style) )'

[golang]
format = '[$symbol$version]($style) '

[helm]
format = '[$symbol$version]($style) '

[hg_branch]

[hostname]

[java]
format = '[$symbol$version]($style) '

[jobs]

[julia]
format = '[$symbol$version]($style) '

[kubernetes]

[line_break]

[memory_usage]
format = "$symbol [${ram}( | ${swap})]($style) "	

[nim]
format = '[$symbol$version]($style) '

[nix_shell]
format = '[$symbol$state( \($name\))]($style) '

[nodejs]
format = '[$symbol$version]($style) '

[ocaml]
format = '[$symbol$version]($style) '

[package]
disabled = true
format = '[$symbol$version]($style) '

[perl]
format = '[$symbol$version]($style) '

[php]
format = '[$symbol$version]($style) '

[purescript]
format = '[$symbol$version]($style) '

[python]
format = '[${symbol}${pyenv_prefix}${version}( \($virtualenv\))]($style) '

[ruby]
format = '[$symbol$version]($style) '

[rust]
format = '[$symbol$version]($style) '

[singularity]
format = '[$symbol\[$env\]]($style) '

[swift]
format = '[$symbol$version]($style) '

[status]
format = '[$symbol$status]($style) '

[terraform]
format = '[$symbol$workspace]($style) '

[time]
format = '[$time]($style) '

[username]

[zig]
format = '[$symbol$version]($style) '
