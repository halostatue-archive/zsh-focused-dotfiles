#! /usr/bin/env bash
# shellcheck source=/dev/null

unsafe() {
  local res

  set +u

  "${@}"

  res=${?}
  set -u

  return "${res}"
}

layout_haskell()
{
  PATH_add ~/.cabal/bin
  [ -d .cabal-sandbox ] || cabal sandbox init
  PATH_add .cabal-sandbox/bin
  export GHC_PACKAGE_PATH
  GHC_PACKAGE_PATH="$(cabal exec -- sh -c "echo \$GHC_PACKAGE_PATH")"
}

find_up_()
{
  (
    while true; do
      for v in "${@}"; do
        if [[ -f "${v}" ]]; then
          echo "${PWD}/${v}"
          return 0
        fi
      done

      if [[ "${PWD}" == / ]] || [[ "${PWD}" == // ]]; then
        return 1
      fi

      cd ..
    done
  )
}

read_version_file()
{
  local file
  file="$(find_up_ "${@}")"

  [[ -z "${file}" ]] && return

  watch_file "${file}"
  ruby -e "puts ARGF.readline" 2> /dev/null "${file}"
}

use_kerl()
{
  has kerl || return

  local version
  version="${1}"

  [[ "${version}" == --auto ]] && version="$(read_version_file .erlang-version)"
  [[ -z "${version}" ]] && return

  local version_path
  version_path=$(
    kerl list installations |
      ruby -e "puts ARGF.read.scan(/${version}.*/).last&.split&.last"
  )
  if [[ -z $version_path ]]; then
    echo "Error: Missing erlang version: $version. Install using kerl." 1>&2
    return 1
  fi

  local activate
  activate="${version_path}/activate"
  [[ -f "${activate}" ]] && unsafe source "${activate}"
}

use_kiex()
{
  has kiex || return

  local version
  version="${1}"

  [[ "${version}" == --auto ]] && version="$(read_version_file .elixir-version)"
  [[ -z "${version}" ]] && return

  local version_path
  version_path=$(
    kiex list |
      ruby -e "puts ARGF.read.scan(/elixir-${version}.*/).last"
  )

  if [[ -z $version_path ]]; then
    echo "Error: Missing elixir version: $version. Install using kiex." 1>&2
    return 1
  fi

  local activate
  activate="${KIEX_HOME:-${HOME}/.kiex}/elixirs/${version_path}.env"

  [[ -f "${activate}" ]] && unsafe source "${activate}"
}

use_docker-machine()
{
  local env machine_cmd
  env="${1:-default}"
  echo Docker machine: "${env}"
  machine_cmd=$(docker-machine env --shell bash "${env}")
  eval "${machine_cmd}"
}

use_nvm()
{
  local version
  version="${1}"

  [[ "${version}" == --auto ]] && version="$(read_version_file .node-version .nvmrc)"
  [[ -z "${version}" ]] && return

  if [[ -e ~/.nvm/nvm.sh ]]; then
    unsafe source ~/.nvm/nvm.sh
    nvm use "${version}"
  elif [[ -f ~/.config/nvm/index ]]; then
    # This works with jorgebucaran/fish-nvm, a fish-specific alternative to
    # nvm. The version of Node requested must be installed before use.
    version="$(
      ruby -e $'
        version=ARGV.shift
        version=version.strip.gsub(/^v/, "").gsub(%r{lts/}, "lts|")
        match=ARGF.readlines.find { |l| l =~ /#{Regexp.escape(version)}/ }
        puts match.split(/\\t/).first if match
      ' "${version}" ~/.config/nvm/index
    )"

    [[ -z "${version}" ]] && return

    if [[ -d ~/.config/nvm/"${version}"/bin ]]; then
      PATH_add "$(cd ~/.config/nvm || exit; pwd -P)/${version}"/bin
      export NVM_BIN
      NVM_BIN=~/.config/nvm/"${version}"/bin
    fi
  fi
}

use_chruby()
{
  local version
  version="${1}"

  [[ "${version}" == --auto ]] && version="$(read_version_file .ruby-version)"
  [[ -z "${version}" ]] && return

  local chruby

  if has brew; then
    local brew_prefix
    brew_prefix="$(brew --prefix)"

    if [[ -e "${brew_prefix}/opt/chruby/share/chruby/chruby.sh" ]]; then
      chruby="${brew_prefix}/opt/chruby/share/chruby/chruby.sh"
    fi
  fi

  [[ -z "${chruby}" ]] && [[ -e /usr/local/share/chruby/chruby.sh ]] &&
    chruby=/usr/local/share/chruby/chruby.sh

  [[ -z "${chruby}" ]] && return

  unsafe source "${chruby}"
  unsafe chruby "${version}"
}

get_cwd() {
  p="$(expand_path "$1")"
  # http://stackoverflow.com/questions/965053/extract-filename-and-extension-in-bash#comment14090830_1403489
  local t="${p%${p##*/}}"
  echo "${t%/}"
}
